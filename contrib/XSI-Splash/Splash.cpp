// SplashPlugin
// Initial code generated by XSI SDK Wizard
// Executed Wed Mar 22 17:48:36 UTC 2006 by alanj
// 
// Tip: You need to compile the generated code before you can load the plug-in.
// After you compile the plug-in, you can load it by clicking Update All in the Plugin Manager.
#include <xsi_application.h>
#include <xsi_context.h>
#include <xsi_pluginregistrar.h>
#include <xsi_status.h>
#include <xsi_argument.h>
#include <xsi_command.h>
#include <xsi_menu.h>

//extras I've addded
#include <xsi_customproperty.h>
#include <xsi_factory.h>
#include <xsi_ppglayout.h> 
#include <xsi_parameter.h> 
#include <xsi_ppgitem.h> 
#include <xsi_ppgeventcontext.h>
#include <xsi_value.h>
#include <xsi_griddata.h> 
#include <xsi_project.h>
#include <xsi_scene.h>
#include <xsi_selection.h> 
#include <xsi_pass.h>

#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <sys/stat.h>
#include <pwd.h>
#include <time.h>

#define MAXNAMELEN 64
#define BUFFERLEN 256

using namespace XSI; 
using std::string;

int get_file_size(char *path,off_t *size)
{
  struct stat file_stats;

  if(stat(path,&file_stats))
    return -1;

  *size = file_stats.st_size;
  return 0;
}

CStatus buildPPG(CustomProperty& splashProp, PPGLayout& splashPPG) {
	
	Application app;
	splashPPG.Clear();
	//now the layout is clear let's build it up^M
	
	Parameter curParam;
	PPGItem curItem;
	
	//add general properties
	splashPPG.AddGroup(L"General Properties", true, 100);
	curItem = splashPPG.AddItem(L"priority", L"Priority", siControlNumber);
	curItem = splashPPG.AddItem(L"cpus", L"CPUs", siControlNumber);
	curItem = splashPPG.AddItem(L"batchSize", L"Batch Size", siControlNumber);
//	CValueArray machinesList;
//	machinesList.Add(L"any");
//	machinesList.Add(L"any");
//	machinesList.Add(L"renderfarm");
//	machinesList.Add(L"renderfarm");
//	machinesList.Add(L"workstations");
//	machinesList.Add(L"workstations");
//	curItem = splashPPG.AddEnumControl(L"machines", machinesList, L"Machines");
	splashPPG.EndGroup();
	
	//create the Pass section
	splashPPG.AddGroup(L"Passes", true, 100);
	curParam = splashProp.GetParameter(L"passes");
	GridData passesGrid(curParam.GetValue());
	
	//setup the column headers
	passesGrid.PutColumnCount(5);
	passesGrid.PutColumnLabel(0,L"Render");
	passesGrid.PutColumnType(0,siColumnBool);
	passesGrid.PutColumnLabel(1,L"PrvQual");
	passesGrid.PutColumnType(1,siColumnBool);
	passesGrid.PutColumnLabel(2,L"Start");
	passesGrid.PutColumnLabel(3,L"End");
	passesGrid.PutColumnLabel(4,L"Skip");
	passesGrid.PutColumnType(4,siColumnBool);
	
	//setup each pass
	Project proj = app.GetActiveProject();
	Scene curScene = proj.GetActiveScene();
	CRefArray passes = curScene.GetPasses();
	passesGrid.PutRowCount(passes.GetCount());
	CRefArray sel;
	CStringArray passFamily;
	passFamily.Add(siPassFamily);
	app.GetSelection().GetArray().Filter(L"", passFamily, L"", sel);
	
	
	bool checkSel = sel.GetCount();
	Pass curPass;
	
	for (int i=0; i<passes.GetCount(); i++) {
		//go through the list and setup each passes
		curPass = passes.GetItem(i);
		Property renderOptions = curPass.GetNestedObjects().GetItem(L"Render Options");
		
		passesGrid.PutRowLabel(i, curPass.GetName());
		if (checkSel) {
			//there are passes selected - so let's check it before setting the render value
			if (sel.Remove(passes.GetItem(i))) {
				//this pass was selected
				passesGrid.PutCell(0, i, true);
			} else {
				//this pass wasn't selected
				passesGrid.PutCell(0, i, false);
			}
		} else {
			//no passes are selected - put them all on
			passesGrid.PutCell(0, i, true);
		}
		
		//set the startFrame
		passesGrid.PutCell(2, i, renderOptions.GetParameterValue(L"StartFrame"));
		passesGrid.PutCell(3, i, renderOptions.GetParameterValue(L"EndFrame"));
		
		//set the skipFrame
		passesGrid.PutCell(4, i, renderOptions.GetParameterValue(L"SkipFrame"));
		
	}
	
	//add the grid to the UI
	curItem = splashPPG.AddItem(L"passes", NULL, siControlGrid);
	curItem.PutAttribute(siUINoLabel, true);
	curItem.PutAttribute(siUIGridColumnWidths, L"170:50:50:50:50:50");
	
	splashPPG.EndGroup();
	
	splashPPG.AddRow();
	splashPPG.AddButton(L"submit", L"Submit");
	splashPPG.AddButton(L"submitAndDrQMan", L"Submit + DrQMan");
	splashPPG.AddButton(L"DrQMan", L"DrQMan");
	splashPPG.EndRow();

	return CStatus::OK;
}

CStatus submitJob(Parameter& passParam, CString& priority, CString& cpus, CString& machines, CValue& batchSize) {	
	
	GridData passesGrid(passParam.GetValue());
	Application app;
	Project proj = app.GetActiveProject();
	Scene curScene = proj.GetActiveScene();
	
	struct passwd * pw;
		
	std::string owner;
	if (!(pw = getpwuid(geteuid()))) {
		owner="ERROR";
	} else {
		owner=pw->pw_name;
	}

	//set the xsiDir	
	CString xsiDir = app.GetInstallationPath(siFactoryPath);
	string factoryPath = xsiDir.GetAsciiString();
	factoryPath = factoryPath.erase(factoryPath.length()-1);

	for (int i=0; i<passesGrid.GetRowCount(); i++) {
		//get the pass we're on
		CRef passRef;
		passRef.Set(L"Passes." + passesGrid.GetRowLabel(i));
		Pass curPass;
		curPass = passRef;
		Property renderOptions = curPass.GetNestedObjects().GetItem(L"Render Options");
		
		if (passesGrid.GetCell(0, i)) {
			CString passName = passesGrid.GetRowLabel(i);
			app.LogMessage(L"Submitting Pass: " + passName);
			
			FILE *fp;
			char * tempFile;
			tempFile = tmpnam(NULL);
	
			if ( ( fp = fopen(tempFile, "wt") ) == NULL ) { 
				app.LogMessage(L"Couldn't call rush");
			} else {
				//owner
				fprintf(fp, "%s\n", owner.c_str());
				
				//jobName
				CString sceneFile = curScene.GetParameter(L"FileName").GetValue();
				string sceneName = sceneFile.GetAsciiString();
				CString title;
				title.PutAsciiString(sceneName.substr(sceneName.find_last_of("/") + 1, sceneName.length()-1).data());
				title = passName + L"-" + title;
				CString date;
				char sdate[BUFFERLEN];
				
				time_t rawtime;
				struct tm * st;

				time ( &rawtime );
				st = localtime ( &rawtime );
  
				snprintf(sdate, BUFFERLEN-1, "%i%02i%02i%02i%02i", st->tm_year + 1900, st->tm_mon, st->tm_mday, st->tm_hour, st->tm_min);
				date.PutAsciiString(sdate);
				title = title + L"-" + date;
				fprintf(fp, "%s\n", title.GetAsciiString());
				
				//xsiDir
				fprintf(fp, "%s\n", factoryPath.substr(factoryPath.find_last_of("/") + 1, factoryPath.length()-1).data());
		
				//priority
				fprintf(fp, "%s\n", priority.GetAsciiString());
				
				//maxCpus
				fprintf(fp, "%s\n", cpus.GetAsciiString());
				
				//frameStart
				fprintf(fp, "%s\n", passesGrid.GetCell(2, i).GetAsText().GetAsciiString());
				
				//frameEnd
				fprintf(fp, "%s\n", passesGrid.GetCell(3, i).GetAsText().GetAsciiString());

				//check image details etc
				CString skipImage = L"";
				CString imageName = renderOptions.GetParameterValue(L"ImageFilePath");
				CString imageExt = renderOptions.GetParameterValue(L"ImageFormat");
				string imgName = imageName.GetAsciiString();
				int firstHash, lastHash, hashCount = 0;
				firstHash = imgName.find_first_of("#");
				if (firstHash) {
					lastHash = imgName.find_last_of("#");
					hashCount = (lastHash - firstHash) + 1;
					imgName.erase(firstHash);
					imageName.PutAsciiString(imgName.data());
				}
				if (imgName.find_first_of("/") != 0 && imgName.find_first_of(":") != 1 ) {
					imageName = proj.GetFullName() + L"/" + imageName;
				}
				
				//framePad
				fprintf(fp, "%i\n", hashCount);

				//frameStep
				fprintf(fp, "1\n");
				
				//blockSize
				fprintf(fp, "%s\n", CString(batchSize).GetAsciiString());
				
				//resX and resY
				CString xRes, yRes, minSamples, maxSamples;
				if (passesGrid.GetCell(1, i)) {
					//preview quality is on
					xRes = CValue(int(renderOptions.GetParameterValue(L"Resolution X")) / 2);
					yRes = CValue(int(renderOptions.GetParameterValue(L"Resolution Y")) / 2);
				} else {
					xRes = renderOptions.GetParameterValue(L"CameraXRes");
					yRes = renderOptions.GetParameterValue(L"CameraYRes");
				}
				fprintf(fp, "%s\n", xRes.GetAsciiString());
				fprintf(fp, "%s\n", yRes.GetAsciiString());
				
				//skipFrames
				if 	(passesGrid.GetCell(4, i)) {
					fprintf(fp, "1\n");
				} else {
					fprintf(fp, "0\n");
				}
				
				//scene
				fprintf(fp, "%s\n", sceneFile.GetAsciiString());
				
				//pass
				fprintf(fp, "%s\n", passName.GetAsciiString());
				
				//renderDir
				string renderDir = imageName.GetAsciiString();
				int lastSlash = renderDir.find_last_of("/");
				string imageFile = renderDir.substr(lastSlash + 1, renderDir.length() - 1);
				renderDir = renderDir.erase(lastSlash);
				fprintf(fp, "%s\n", renderDir.c_str());
				
				//image
				fprintf(fp, "%s\n", imageFile.c_str());
				
				//imageExt
				fprintf(fp, ".%s\n", imageExt.GetAsciiString());
				
				//runScript
				fprintf(fp, "0\n");
				
				//scriptRun
				fprintf(fp, "noScript");
				
				fclose(fp);
				
				CString submitJob;
				submitJob.PutAsciiString(tempFile);
				submitJob = L"sendjob -t xsi " + submitJob + L" &";

				//now send the job
				system(submitJob.GetAsciiString());
				
			}
		}
		
	}

	return CStatus::OK;
}


XSIPLUGINCALLBACK CStatus XSILoadPlugin( PluginRegistrar& in_reg )
{
	in_reg.PutAuthor(L"Alan Jones");
	in_reg.PutName(L"SplashPlugin");
	in_reg.PutEmail(L"alan.jones@fluid-pictures.com");
	in_reg.PutURL(L"");
	in_reg.PutVersion(1,0);
	in_reg.RegisterProperty(L"SplashProp");
	in_reg.RegisterCommand(L"Splash",L"Splash");
	in_reg.RegisterMenu(siMenuTbRenderRenderID,L"Splash_Menu",false,false);
	//RegistrationInsertionPoint - do not remove this line

	return CStatus::OK;
}

XSIPLUGINCALLBACK CStatus XSIUnloadPlugin( const PluginRegistrar& in_reg )
{
	CString strPluginName;
	strPluginName = in_reg.GetName();
	Application().LogMessage(strPluginName + L" has been unloaded.");
	return CStatus::OK;
}

XSIPLUGINCALLBACK CStatus SplashProp_Define( CRef& in_ctxt )
{
	Context ctxt( in_ctxt );
	CustomProperty splashProp;
	splashProp = ctxt.GetSource();
	Application app;

	Parameter curParam;
	
	splashProp.AddParameter(L"priority", CValue::siUInt2, 0, L"Priority", L"", 5, curParam);
	splashProp.AddParameter(L"cpus", CValue::siUInt2, 0, L"CPUs", L"", 30, curParam);
	splashProp.AddParameter(L"batchSize", CValue::siUInt2, 0, L"Batch Size", L"", 10, curParam);
	splashProp.AddParameter(L"machines", CValue::siString, 0, L"Machines", L"", L"any", curParam);
	splashProp.AddGridParameter(L"passes");

	return CStatus::OK;
}

XSIPLUGINCALLBACK CStatus SplashProp_DefineLayout( CRef& in_ctxt )
{
	Context ctxt( in_ctxt );
	PPGLayout oLayout;
	PPGItem oItem;
	oLayout = ctxt.GetSource();
	oLayout.Clear();
	return CStatus::OK;
}

XSIPLUGINCALLBACK CStatus SplashProp_PPGEvent( const CRef& in_ctxt )
{
	// This callback is called when events happen in the user interface
	// This is where you implement the "logic" code.
	
	// If the value of a parameter changes but the UI is not shown then this
	// code will not execute.  Also this code is not re-entrant, so any changes
	// to parameters inside this code will not result in further calls to this function
	
	Application app ;

	// The context object is used to determine exactly what happened
	// We don't use the same "PPG" object that is used from Script-based logic code 
	// but through the C++ API we can achieve exactly the same functionality.
	PPGEventContext ctxt( in_ctxt ) ;

	PPGEventContext::PPGEvent eventID = ctxt.GetEventID() ;

	if ( eventID == PPGEventContext::siOnInit )
	{
		// This event meant that the UI was just created.
		// It gives us a chance to set some parameter values.
		// We could even change the layout completely at this point.

		// For this event Source() of the event is the CustomProperty object

		CustomProperty prop = ctxt.GetSource() ;	

		PPGLayout layout = prop.GetPPGLayout();

		buildPPG(prop, layout);

		// If you regenerate the layout then call this:
		ctxt.PutAttribute(L"Refresh",true);

	}
	else if ( eventID == PPGEventContext::siButtonClicked )
	{
		// If there are multiple buttons 
		// we can use this attribute to figure out which one was clicked.
		CValue buttonPressed = ctxt.GetAttribute( L"Button" ) ;	
		CustomProperty splashProp = ctxt.GetSource();

		if (buttonPressed.GetAsText() == L"submit" || buttonPressed.GetAsText() == L"submitAndDrQMan") {
			//we should be performing the submit
			Parameter passesGrid = splashProp.GetParameter(L"passes");
			CString priority = splashProp.GetParameterValue(L"priority");
			CString cpus = splashProp.GetParameterValue(L"cpus");
			CString machines = splashProp.GetParameterValue(L"machines");
			CValue batchSize = splashProp.GetParameterValue(L"batchSize");
			submitJob(passesGrid, priority, cpus, machines, batchSize);
		}

		if (buttonPressed.GetAsText() == L"DrQMan" || buttonPressed.GetAsText() == L"submitAndDrQMan") {
			//we should be starting DrQMan
			system("drqman &");
		}

	}
	else if ( eventID == PPGEventContext::siTabChange )
	{
		// We will be called when the PPG is first opened
		// and every time the tab changes

		// Retrieve the label of the tab that is now active
		CValue tabLabel = ctxt.GetAttribute( L"Tab" ) ;

		//app.LogMessage( L"Tab changed to: " + tabLabel .GetAsText() ) ;
	}
	else if ( eventID == PPGEventContext::siParameterChange )
	{
		// For this event the Source of the event is the parameter
		// itself
		Parameter changed = ctxt.GetSource() ;	
		CustomProperty prop = changed.GetParent() ;	
		CString   paramName = changed.GetScriptName() ; 

		//app.LogMessage( L"Parameter Changed: " + paramName ) ;
	}

	return CStatus::OK ;
}

XSIPLUGINCALLBACK CStatus Splash_Init( CRef& in_ctxt )
{
	Context ctxt( in_ctxt );
	Command oCmd;
	oCmd = ctxt.GetSource();
	oCmd.PutDescription(L"Submit passes to Rush");
	oCmd.SetFlag(siCannotBeUsedInBatch,true);
	oCmd.EnableReturnValue(true);

	return CStatus::OK;
}

XSIPLUGINCALLBACK CStatus Splash_Execute( CRef& in_ctxt )
{
	Context ctxt( in_ctxt );
	CValueArray args = ctxt.GetAttribute(L"Arguments");
	
	Application app;
	Factory factory = app.GetFactory();

	// 
	// TODO: Put your command implementation here.
	// 
	// Return a value by setting this attribute:
	
	//Create our temporary custom property to use for the dialogue
	CustomProperty splashProp = factory.CreateObject(L"SplashProp");
	
	//Display the dialogue
	CValueArray cmdargs(1);
	cmdargs[0] = splashProp.GetFullName();
	CValue outarg;
	app.ExecuteCommand(L"InspectObj", cmdargs, outarg);
	
	ctxt.PutAttribute( L"ReturnValue", true );

	// Return CStatus::Fail if you want to raise a script error
	return CStatus::OK;
}

XSIPLUGINCALLBACK CStatus Splash_Menu_Init( CRef& in_ctxt )
{
	Context ctxt( in_ctxt );
	Menu oMenu;
	oMenu = ctxt.GetSource();
	MenuItem oNewItem;
	oMenu.AddCommandItem(L"Splash",L"Splash",oNewItem);
	return CStatus::OK;
}
