# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""
The drqueue module allows the access to the libdrqueue library responsible
of all major operations that can be applied remotely to drqueue master and
slaves. Also provides access to all data structures of DrQueue.
"""

import _libdrqueue
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


DIR_SEPARATOR_CHAR = _libdrqueue.DIR_SEPARATOR_CHAR
DIR_SEPARATOR_STR = _libdrqueue.DIR_SEPARATOR_STR
PATH_SEPARATOR_CHAR = _libdrqueue.PATH_SEPARATOR_CHAR
PATH_SEPARATOR_STR = _libdrqueue.PATH_SEPARATOR_STR
AEF_ACTIVE = _libdrqueue.AEF_ACTIVE
class autoenable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, autoenable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, autoenable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["last"] = _libdrqueue.autoenable_last_set
    __swig_getmethods__["last"] = _libdrqueue.autoenable_last_get
    if _newclass:last = _swig_property(_libdrqueue.autoenable_last_get, _libdrqueue.autoenable_last_set)
    __swig_setmethods__["h"] = _libdrqueue.autoenable_h_set
    __swig_getmethods__["h"] = _libdrqueue.autoenable_h_get
    if _newclass:h = _swig_property(_libdrqueue.autoenable_h_get, _libdrqueue.autoenable_h_set)
    __swig_setmethods__["m"] = _libdrqueue.autoenable_m_set
    __swig_getmethods__["m"] = _libdrqueue.autoenable_m_get
    if _newclass:m = _swig_property(_libdrqueue.autoenable_m_get, _libdrqueue.autoenable_m_set)
    __swig_setmethods__["flags"] = _libdrqueue.autoenable_flags_set
    __swig_getmethods__["flags"] = _libdrqueue.autoenable_flags_get
    if _newclass:flags = _swig_property(_libdrqueue.autoenable_flags_get, _libdrqueue.autoenable_flags_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_autoenable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_autoenable
    __del__ = lambda self : None;
autoenable_swigregister = _libdrqueue.autoenable_swigregister
autoenable_swigregister(autoenable)
cvar = _libdrqueue.cvar

class computer_limits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, computer_limits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, computer_limits, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enabled"] = _libdrqueue.computer_limits_enabled_set
    __swig_getmethods__["enabled"] = _libdrqueue.computer_limits_enabled_get
    if _newclass:enabled = _swig_property(_libdrqueue.computer_limits_enabled_get, _libdrqueue.computer_limits_enabled_set)
    __swig_setmethods__["nmaxcpus"] = _libdrqueue.computer_limits_nmaxcpus_set
    __swig_getmethods__["nmaxcpus"] = _libdrqueue.computer_limits_nmaxcpus_get
    if _newclass:nmaxcpus = _swig_property(_libdrqueue.computer_limits_nmaxcpus_get, _libdrqueue.computer_limits_nmaxcpus_set)
    __swig_setmethods__["maxfreeloadcpu"] = _libdrqueue.computer_limits_maxfreeloadcpu_set
    __swig_getmethods__["maxfreeloadcpu"] = _libdrqueue.computer_limits_maxfreeloadcpu_get
    if _newclass:maxfreeloadcpu = _swig_property(_libdrqueue.computer_limits_maxfreeloadcpu_get, _libdrqueue.computer_limits_maxfreeloadcpu_set)
    __swig_setmethods__["autoenable"] = _libdrqueue.computer_limits_autoenable_set
    __swig_getmethods__["autoenable"] = _libdrqueue.computer_limits_autoenable_get
    if _newclass:autoenable = _swig_property(_libdrqueue.computer_limits_autoenable_get, _libdrqueue.computer_limits_autoenable_set)
    __swig_setmethods__["npools"] = _libdrqueue.computer_limits_npools_set
    __swig_getmethods__["npools"] = _libdrqueue.computer_limits_npools_get
    if _newclass:npools = _swig_property(_libdrqueue.computer_limits_npools_get, _libdrqueue.computer_limits_npools_set)
    __swig_setmethods__["poolshmid"] = _libdrqueue.computer_limits_poolshmid_set
    __swig_getmethods__["poolshmid"] = _libdrqueue.computer_limits_poolshmid_get
    if _newclass:poolshmid = _swig_property(_libdrqueue.computer_limits_poolshmid_get, _libdrqueue.computer_limits_poolshmid_set)
    __swig_setmethods__["poolsemid"] = _libdrqueue.computer_limits_poolsemid_set
    __swig_getmethods__["poolsemid"] = _libdrqueue.computer_limits_poolsemid_get
    if _newclass:poolsemid = _swig_property(_libdrqueue.computer_limits_poolsemid_get, _libdrqueue.computer_limits_poolsemid_set)
    __swig_setmethods__["npoolsattached"] = _libdrqueue.computer_limits_npoolsattached_set
    __swig_getmethods__["npoolsattached"] = _libdrqueue.computer_limits_npoolsattached_get
    if _newclass:npoolsattached = _swig_property(_libdrqueue.computer_limits_npoolsattached_get, _libdrqueue.computer_limits_npoolsattached_set)
    __swig_getmethods__["local_pool"] = _libdrqueue.computer_limits_local_pool_get
    if _newclass:local_pool = _swig_property(_libdrqueue.computer_limits_local_pool_get)
    __swig_getmethods__["pool"] = _libdrqueue.computer_limits_pool_get
    if _newclass:pool = _swig_property(_libdrqueue.computer_limits_pool_get)
    def get_pool(*args): return _libdrqueue.computer_limits_get_pool(*args)
    def pool_add(*args): return _libdrqueue.computer_limits_pool_add(*args)
    def pool_remove(*args): return _libdrqueue.computer_limits_pool_remove(*args)
    def pool_list(*args): return _libdrqueue.computer_limits_pool_list(*args)
    def __init__(self, *args): 
        this = _libdrqueue.new_computer_limits(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_computer_limits
    __del__ = lambda self : None;
computer_limits_swigregister = _libdrqueue.computer_limits_swigregister
computer_limits_swigregister(computer_limits)

class computer_limits_local_pool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, computer_limits_local_pool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, computer_limits_local_pool, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ptr"] = _libdrqueue.computer_limits_local_pool_ptr_set
    __swig_getmethods__["ptr"] = _libdrqueue.computer_limits_local_pool_ptr_get
    if _newclass:ptr = _swig_property(_libdrqueue.computer_limits_local_pool_ptr_get, _libdrqueue.computer_limits_local_pool_ptr_set)
    __swig_setmethods__["padding"] = _libdrqueue.computer_limits_local_pool_padding_set
    __swig_getmethods__["padding"] = _libdrqueue.computer_limits_local_pool_padding_get
    if _newclass:padding = _swig_property(_libdrqueue.computer_limits_local_pool_padding_get, _libdrqueue.computer_limits_local_pool_padding_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_computer_limits_local_pool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_computer_limits_local_pool
    __del__ = lambda self : None;
computer_limits_local_pool_swigregister = _libdrqueue.computer_limits_local_pool_swigregister
computer_limits_local_pool_swigregister(computer_limits_local_pool)

class computer_limits_pool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, computer_limits_pool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, computer_limits_pool, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ptr"] = _libdrqueue.computer_limits_pool_ptr_set
    __swig_getmethods__["ptr"] = _libdrqueue.computer_limits_pool_ptr_get
    if _newclass:ptr = _swig_property(_libdrqueue.computer_limits_pool_ptr_get, _libdrqueue.computer_limits_pool_ptr_set)
    __swig_setmethods__["padding"] = _libdrqueue.computer_limits_pool_padding_set
    __swig_getmethods__["padding"] = _libdrqueue.computer_limits_pool_padding_get
    if _newclass:padding = _swig_property(_libdrqueue.computer_limits_pool_padding_get, _libdrqueue.computer_limits_pool_padding_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_computer_limits_pool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_computer_limits_pool
    __del__ = lambda self : None;
computer_limits_pool_swigregister = _libdrqueue.computer_limits_pool_swigregister
computer_limits_pool_swigregister(computer_limits_pool)

class computer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, computer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, computer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hwinfo"] = _libdrqueue.computer_hwinfo_set
    __swig_getmethods__["hwinfo"] = _libdrqueue.computer_hwinfo_get
    if _newclass:hwinfo = _swig_property(_libdrqueue.computer_hwinfo_get, _libdrqueue.computer_hwinfo_set)
    __swig_setmethods__["status"] = _libdrqueue.computer_status_set
    __swig_getmethods__["status"] = _libdrqueue.computer_status_get
    if _newclass:status = _swig_property(_libdrqueue.computer_status_get, _libdrqueue.computer_status_set)
    __swig_setmethods__["limits"] = _libdrqueue.computer_limits_set
    __swig_getmethods__["limits"] = _libdrqueue.computer_limits_get
    if _newclass:limits = _swig_property(_libdrqueue.computer_limits_get, _libdrqueue.computer_limits_set)
    __swig_setmethods__["lastconn"] = _libdrqueue.computer_lastconn_set
    __swig_getmethods__["lastconn"] = _libdrqueue.computer_lastconn_get
    if _newclass:lastconn = _swig_property(_libdrqueue.computer_lastconn_get, _libdrqueue.computer_lastconn_set)
    __swig_setmethods__["used"] = _libdrqueue.computer_used_set
    __swig_getmethods__["used"] = _libdrqueue.computer_used_get
    if _newclass:used = _swig_property(_libdrqueue.computer_used_get, _libdrqueue.computer_used_set)
    __swig_setmethods__["semid"] = _libdrqueue.computer_semid_set
    __swig_getmethods__["semid"] = _libdrqueue.computer_semid_get
    if _newclass:semid = _swig_property(_libdrqueue.computer_semid_get, _libdrqueue.computer_semid_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_computer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_computer
    __del__ = lambda self : None;
    def list_pools(*args): return _libdrqueue.computer_list_pools(*args)
    def set_pools(*args): return _libdrqueue.computer_set_pools(*args)
    def request_enable(*args): return _libdrqueue.computer_request_enable(*args)
    def request_disable(*args): return _libdrqueue.computer_request_disable(*args)
    def update(*args): return _libdrqueue.computer_update(*args)
    def add_pool(*args): return _libdrqueue.computer_add_pool(*args)
    def remove_pool(*args): return _libdrqueue.computer_remove_pool(*args)
computer_swigregister = _libdrqueue.computer_swigregister
computer_swigregister(computer)

computer_index_addr = _libdrqueue.computer_index_addr
computer_index_name = _libdrqueue.computer_index_name
computer_index_free = _libdrqueue.computer_index_free
computer_available = _libdrqueue.computer_available
computer_ntasks = _libdrqueue.computer_ntasks
computer_nrunning = _libdrqueue.computer_nrunning
computer_nrunning_job = _libdrqueue.computer_nrunning_job
computer_update_assigned = _libdrqueue.computer_update_assigned
computer_init = _libdrqueue.computer_init
computer_free = _libdrqueue.computer_free
computer_ncomputers_masterdb = _libdrqueue.computer_ncomputers_masterdb
computer_limits_init = _libdrqueue.computer_limits_init
computer_limits_cpu_init = _libdrqueue.computer_limits_cpu_init
computer_index_correct_master = _libdrqueue.computer_index_correct_master
computer_autoenable_check = _libdrqueue.computer_autoenable_check
computer_lock_check = _libdrqueue.computer_lock_check
computer_lock = _libdrqueue.computer_lock
computer_release = _libdrqueue.computer_release
computer_attach = _libdrqueue.computer_attach
computer_detach = _libdrqueue.computer_detach
computer_limits_cleanup_received = _libdrqueue.computer_limits_cleanup_received
computer_limits_cleanup_to_send = _libdrqueue.computer_limits_cleanup_to_send
ARCH_UNKNOWN = _libdrqueue.ARCH_UNKNOWN
ARCH_INTEL = _libdrqueue.ARCH_INTEL
ARCH_MIPS = _libdrqueue.ARCH_MIPS
ARCH_PPC = _libdrqueue.ARCH_PPC
OS_UNKNOWN = _libdrqueue.OS_UNKNOWN
OS_IRIX = _libdrqueue.OS_IRIX
OS_LINUX = _libdrqueue.OS_LINUX
OS_CYGWIN = _libdrqueue.OS_CYGWIN
OS_WINDOWS = _libdrqueue.OS_WINDOWS
OS_OSX = _libdrqueue.OS_OSX
OS_FREEBSD = _libdrqueue.OS_FREEBSD
PROCTYPE_UNKNOWN = _libdrqueue.PROCTYPE_UNKNOWN
PROCTYPE_INTEL_UNKNOWN = _libdrqueue.PROCTYPE_INTEL_UNKNOWN
PROCTYPE_PENTIUM = _libdrqueue.PROCTYPE_PENTIUM
PROCTYPE_PENTIUMII = _libdrqueue.PROCTYPE_PENTIUMII
PROCTYPE_PENTIUMIII = _libdrqueue.PROCTYPE_PENTIUMIII
PROCTYPE_PENTIUM4 = _libdrqueue.PROCTYPE_PENTIUM4
PROCTYPE_INTELXEON = _libdrqueue.PROCTYPE_INTELXEON
PROCTYPE_INTELCOREDUO = _libdrqueue.PROCTYPE_INTELCOREDUO
PROCTYPE_INTELCORE2DUO = _libdrqueue.PROCTYPE_INTELCORE2DUO
PROCTYPE_INTELIA64 = _libdrqueue.PROCTYPE_INTELIA64
PROCTYPE_PENTIUMM = _libdrqueue.PROCTYPE_PENTIUMM
PROCTYPE_ATHLON = _libdrqueue.PROCTYPE_ATHLON
PROCTYPE_OPTERON = _libdrqueue.PROCTYPE_OPTERON
PROCTYPE_MIPSR5000 = _libdrqueue.PROCTYPE_MIPSR5000
PROCTYPE_MIPSR10000 = _libdrqueue.PROCTYPE_MIPSR10000
PROCTYPE_MIPSR12000 = _libdrqueue.PROCTYPE_MIPSR12000
PROCTYPE_PPC = _libdrqueue.PROCTYPE_PPC
PROCTYPE_INTEL_CORE2 = _libdrqueue.PROCTYPE_INTEL_CORE2
class computer_hwinfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, computer_hwinfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, computer_hwinfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _libdrqueue.computer_hwinfo_name_set
    __swig_getmethods__["name"] = _libdrqueue.computer_hwinfo_name_get
    if _newclass:name = _swig_property(_libdrqueue.computer_hwinfo_name_get, _libdrqueue.computer_hwinfo_name_set)
    __swig_setmethods__["id"] = _libdrqueue.computer_hwinfo_id_set
    __swig_getmethods__["id"] = _libdrqueue.computer_hwinfo_id_get
    if _newclass:id = _swig_property(_libdrqueue.computer_hwinfo_id_get, _libdrqueue.computer_hwinfo_id_set)
    __swig_setmethods__["arch"] = _libdrqueue.computer_hwinfo_arch_set
    __swig_getmethods__["arch"] = _libdrqueue.computer_hwinfo_arch_get
    if _newclass:arch = _swig_property(_libdrqueue.computer_hwinfo_arch_get, _libdrqueue.computer_hwinfo_arch_set)
    __swig_setmethods__["os"] = _libdrqueue.computer_hwinfo_os_set
    __swig_getmethods__["os"] = _libdrqueue.computer_hwinfo_os_get
    if _newclass:os = _swig_property(_libdrqueue.computer_hwinfo_os_get, _libdrqueue.computer_hwinfo_os_set)
    __swig_setmethods__["proctype"] = _libdrqueue.computer_hwinfo_proctype_set
    __swig_getmethods__["proctype"] = _libdrqueue.computer_hwinfo_proctype_get
    if _newclass:proctype = _swig_property(_libdrqueue.computer_hwinfo_proctype_get, _libdrqueue.computer_hwinfo_proctype_set)
    __swig_setmethods__["procspeed"] = _libdrqueue.computer_hwinfo_procspeed_set
    __swig_getmethods__["procspeed"] = _libdrqueue.computer_hwinfo_procspeed_get
    if _newclass:procspeed = _swig_property(_libdrqueue.computer_hwinfo_procspeed_get, _libdrqueue.computer_hwinfo_procspeed_set)
    __swig_setmethods__["ncpus"] = _libdrqueue.computer_hwinfo_ncpus_set
    __swig_getmethods__["ncpus"] = _libdrqueue.computer_hwinfo_ncpus_get
    if _newclass:ncpus = _swig_property(_libdrqueue.computer_hwinfo_ncpus_get, _libdrqueue.computer_hwinfo_ncpus_set)
    __swig_setmethods__["speedindex"] = _libdrqueue.computer_hwinfo_speedindex_set
    __swig_getmethods__["speedindex"] = _libdrqueue.computer_hwinfo_speedindex_get
    if _newclass:speedindex = _swig_property(_libdrqueue.computer_hwinfo_speedindex_get, _libdrqueue.computer_hwinfo_speedindex_set)
    __swig_setmethods__["memory"] = _libdrqueue.computer_hwinfo_memory_set
    __swig_getmethods__["memory"] = _libdrqueue.computer_hwinfo_memory_get
    if _newclass:memory = _swig_property(_libdrqueue.computer_hwinfo_memory_get, _libdrqueue.computer_hwinfo_memory_set)
    __swig_setmethods__["nnbits"] = _libdrqueue.computer_hwinfo_nnbits_set
    __swig_getmethods__["nnbits"] = _libdrqueue.computer_hwinfo_nnbits_get
    if _newclass:nnbits = _swig_property(_libdrqueue.computer_hwinfo_nnbits_get, _libdrqueue.computer_hwinfo_nnbits_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_computer_hwinfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_computer_hwinfo
    __del__ = lambda self : None;
computer_hwinfo_swigregister = _libdrqueue.computer_hwinfo_swigregister
computer_hwinfo_swigregister(computer_hwinfo)

get_hwinfo = _libdrqueue.get_hwinfo
get_proctype = _libdrqueue.get_proctype
get_procspeed = _libdrqueue.get_procspeed
get_numproc = _libdrqueue.get_numproc
get_speedindex = _libdrqueue.get_speedindex
get_memory = _libdrqueue.get_memory
computer_info_nnbits = _libdrqueue.computer_info_nnbits
report_hwinfo = _libdrqueue.report_hwinfo
bitsstring = _libdrqueue.bitsstring
osstring = _libdrqueue.osstring
archstring = _libdrqueue.archstring
proctypestring = _libdrqueue.proctypestring
class computer_status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, computer_status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, computer_status, name)
    __repr__ = _swig_repr
    __swig_setmethods__["loadavg"] = _libdrqueue.computer_status_loadavg_set
    __swig_getmethods__["loadavg"] = _libdrqueue.computer_status_loadavg_get
    if _newclass:loadavg = _swig_property(_libdrqueue.computer_status_loadavg_get, _libdrqueue.computer_status_loadavg_set)
    __swig_setmethods__["ntasks"] = _libdrqueue.computer_status_ntasks_set
    __swig_getmethods__["ntasks"] = _libdrqueue.computer_status_ntasks_get
    if _newclass:ntasks = _swig_property(_libdrqueue.computer_status_ntasks_get, _libdrqueue.computer_status_ntasks_set)
    __swig_setmethods__["nrunning"] = _libdrqueue.computer_status_nrunning_set
    __swig_getmethods__["nrunning"] = _libdrqueue.computer_status_nrunning_get
    if _newclass:nrunning = _swig_property(_libdrqueue.computer_status_nrunning_get, _libdrqueue.computer_status_nrunning_set)
    __swig_setmethods__["task"] = _libdrqueue.computer_status_task_set
    __swig_getmethods__["task"] = _libdrqueue.computer_status_task_get
    if _newclass:task = _swig_property(_libdrqueue.computer_status_task_get, _libdrqueue.computer_status_task_set)
    def get_loadavg(*args): return _libdrqueue.computer_status_get_loadavg(*args)
    def get_task(*args): return _libdrqueue.computer_status_get_task(*args)
    def __init__(self, *args): 
        this = _libdrqueue.new_computer_status(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_computer_status
    __del__ = lambda self : None;
computer_status_swigregister = _libdrqueue.computer_status_swigregister
computer_status_swigregister(computer_status)

get_computer_status = _libdrqueue.get_computer_status
computer_status_init = _libdrqueue.computer_status_init
check_tasks = _libdrqueue.check_tasks
get_loadavg = _libdrqueue.get_loadavg
report_computer_status = _libdrqueue.report_computer_status
DR_EXITEDFLAG = _libdrqueue.DR_EXITEDFLAG
DR_SIGNALEDFLAG = _libdrqueue.DR_SIGNALEDFLAG
TASKSTATUS_LOADING = _libdrqueue.TASKSTATUS_LOADING
TASKSTATUS_RUNNING = _libdrqueue.TASKSTATUS_RUNNING
TASKSTATUS_FINISHED = _libdrqueue.TASKSTATUS_FINISHED
class task(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, task, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, task, name)
    __repr__ = _swig_repr
    __swig_setmethods__["used"] = _libdrqueue.task_used_set
    __swig_getmethods__["used"] = _libdrqueue.task_used_get
    if _newclass:used = _swig_property(_libdrqueue.task_used_get, _libdrqueue.task_used_set)
    __swig_setmethods__["jobname"] = _libdrqueue.task_jobname_set
    __swig_getmethods__["jobname"] = _libdrqueue.task_jobname_get
    if _newclass:jobname = _swig_property(_libdrqueue.task_jobname_get, _libdrqueue.task_jobname_set)
    __swig_setmethods__["ijob"] = _libdrqueue.task_ijob_set
    __swig_getmethods__["ijob"] = _libdrqueue.task_ijob_get
    if _newclass:ijob = _swig_property(_libdrqueue.task_ijob_get, _libdrqueue.task_ijob_set)
    __swig_setmethods__["icomp"] = _libdrqueue.task_icomp_set
    __swig_getmethods__["icomp"] = _libdrqueue.task_icomp_get
    if _newclass:icomp = _swig_property(_libdrqueue.task_icomp_get, _libdrqueue.task_icomp_set)
    __swig_setmethods__["itask"] = _libdrqueue.task_itask_set
    __swig_getmethods__["itask"] = _libdrqueue.task_itask_get
    if _newclass:itask = _swig_property(_libdrqueue.task_itask_get, _libdrqueue.task_itask_set)
    __swig_setmethods__["jobcmd"] = _libdrqueue.task_jobcmd_set
    __swig_getmethods__["jobcmd"] = _libdrqueue.task_jobcmd_get
    if _newclass:jobcmd = _swig_property(_libdrqueue.task_jobcmd_get, _libdrqueue.task_jobcmd_set)
    __swig_setmethods__["owner"] = _libdrqueue.task_owner_set
    __swig_getmethods__["owner"] = _libdrqueue.task_owner_get
    if _newclass:owner = _swig_property(_libdrqueue.task_owner_get, _libdrqueue.task_owner_set)
    __swig_setmethods__["frame"] = _libdrqueue.task_frame_set
    __swig_getmethods__["frame"] = _libdrqueue.task_frame_get
    if _newclass:frame = _swig_property(_libdrqueue.task_frame_get, _libdrqueue.task_frame_set)
    __swig_setmethods__["frame_start"] = _libdrqueue.task_frame_start_set
    __swig_getmethods__["frame_start"] = _libdrqueue.task_frame_start_get
    if _newclass:frame_start = _swig_property(_libdrqueue.task_frame_start_get, _libdrqueue.task_frame_start_set)
    __swig_setmethods__["frame_end"] = _libdrqueue.task_frame_end_set
    __swig_getmethods__["frame_end"] = _libdrqueue.task_frame_end_get
    if _newclass:frame_end = _swig_property(_libdrqueue.task_frame_end_get, _libdrqueue.task_frame_end_set)
    __swig_setmethods__["frame_pad"] = _libdrqueue.task_frame_pad_set
    __swig_getmethods__["frame_pad"] = _libdrqueue.task_frame_pad_get
    if _newclass:frame_pad = _swig_property(_libdrqueue.task_frame_pad_get, _libdrqueue.task_frame_pad_set)
    __swig_setmethods__["frame_step"] = _libdrqueue.task_frame_step_set
    __swig_getmethods__["frame_step"] = _libdrqueue.task_frame_step_get
    if _newclass:frame_step = _swig_property(_libdrqueue.task_frame_step_get, _libdrqueue.task_frame_step_set)
    __swig_setmethods__["block_size"] = _libdrqueue.task_block_size_set
    __swig_getmethods__["block_size"] = _libdrqueue.task_block_size_get
    if _newclass:block_size = _swig_property(_libdrqueue.task_block_size_get, _libdrqueue.task_block_size_set)
    __swig_setmethods__["pid"] = _libdrqueue.task_pid_set
    __swig_getmethods__["pid"] = _libdrqueue.task_pid_get
    if _newclass:pid = _swig_property(_libdrqueue.task_pid_get, _libdrqueue.task_pid_set)
    __swig_setmethods__["exitstatus"] = _libdrqueue.task_exitstatus_set
    __swig_getmethods__["exitstatus"] = _libdrqueue.task_exitstatus_get
    if _newclass:exitstatus = _swig_property(_libdrqueue.task_exitstatus_get, _libdrqueue.task_exitstatus_set)
    __swig_setmethods__["status"] = _libdrqueue.task_status_set
    __swig_getmethods__["status"] = _libdrqueue.task_status_get
    if _newclass:status = _swig_property(_libdrqueue.task_status_get, _libdrqueue.task_status_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_task(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_task
    __del__ = lambda self : None;
task_swigregister = _libdrqueue.task_swigregister
task_swigregister(task)

task_init_all = _libdrqueue.task_init_all
task_init = _libdrqueue.task_init
task_available = _libdrqueue.task_available
task_report = _libdrqueue.task_report
task_status_string = _libdrqueue.task_status_string
task_environment_set = _libdrqueue.task_environment_set
task_set_to_job_frame = _libdrqueue.task_set_to_job_frame
task_is_running = _libdrqueue.task_is_running
class request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, request, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libdrqueue.request_type_set
    __swig_getmethods__["type"] = _libdrqueue.request_type_get
    if _newclass:type = _swig_property(_libdrqueue.request_type_get, _libdrqueue.request_type_set)
    __swig_setmethods__["who"] = _libdrqueue.request_who_set
    __swig_getmethods__["who"] = _libdrqueue.request_who_get
    if _newclass:who = _swig_property(_libdrqueue.request_who_get, _libdrqueue.request_who_set)
    __swig_setmethods__["data"] = _libdrqueue.request_data_set
    __swig_getmethods__["data"] = _libdrqueue.request_data_get
    if _newclass:data = _swig_property(_libdrqueue.request_data_get, _libdrqueue.request_data_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_request(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_request
    __del__ = lambda self : None;
request_swigregister = _libdrqueue.request_swigregister
request_swigregister(request)

handle_request_master = _libdrqueue.handle_request_master
handle_request_slave = _libdrqueue.handle_request_slave
handle_r_r_register = _libdrqueue.handle_r_r_register
handle_r_r_ucstatus = _libdrqueue.handle_r_r_ucstatus
handle_r_r_regisjob = _libdrqueue.handle_r_r_regisjob
handle_r_r_availjob = _libdrqueue.handle_r_r_availjob
handle_r_r_taskfini = _libdrqueue.handle_r_r_taskfini
handle_r_r_listjobs = _libdrqueue.handle_r_r_listjobs
handle_r_r_listcomp = _libdrqueue.handle_r_r_listcomp
handle_r_r_deletjob = _libdrqueue.handle_r_r_deletjob
handle_r_r_stopjob = _libdrqueue.handle_r_r_stopjob
handle_r_r_contjob = _libdrqueue.handle_r_r_contjob
handle_r_r_hstopjob = _libdrqueue.handle_r_r_hstopjob
handle_r_r_rerunjob = _libdrqueue.handle_r_r_rerunjob
handle_r_r_jobxfer = _libdrqueue.handle_r_r_jobxfer
handle_r_r_jobxferfi = _libdrqueue.handle_r_r_jobxferfi
handle_r_r_compxfer = _libdrqueue.handle_r_r_compxfer
handle_r_r_jobfwait = _libdrqueue.handle_r_r_jobfwait
handle_r_r_jobfkill = _libdrqueue.handle_r_r_jobfkill
handle_r_r_jobffini = _libdrqueue.handle_r_r_jobffini
handle_r_r_jobfkfin = _libdrqueue.handle_r_r_jobfkfin
handle_r_r_uclimits = _libdrqueue.handle_r_r_uclimits
handle_r_r_slavexit = _libdrqueue.handle_r_r_slavexit
handle_r_r_jobsesup = _libdrqueue.handle_r_r_jobsesup
handle_r_r_joblnmcs = _libdrqueue.handle_r_r_joblnmcs
handle_r_r_joblnmccs = _libdrqueue.handle_r_r_joblnmccs
handle_r_r_jobpriup = _libdrqueue.handle_r_r_jobpriup
handle_r_r_jobfinfo = _libdrqueue.handle_r_r_jobfinfo
handle_r_r_jobfrstrqd = _libdrqueue.handle_r_r_jobfrstrqd
handle_r_r_jobblkhost = _libdrqueue.handle_r_r_jobblkhost
handle_r_r_jobdelblkhost = _libdrqueue.handle_r_r_jobdelblkhost
handle_r_r_joblstblkhost = _libdrqueue.handle_r_r_joblstblkhost
handle_r_r_joblms = _libdrqueue.handle_r_r_joblms
handle_r_r_joblps = _libdrqueue.handle_r_r_joblps
handle_r_r_jobenvvars = _libdrqueue.handle_r_r_jobenvvars
handle_r_r_jobblkhostname = _libdrqueue.handle_r_r_jobblkhostname
handle_r_r_jobunblkhostname = _libdrqueue.handle_r_r_jobunblkhostname
handle_r_r_jobname = _libdrqueue.handle_r_r_jobname
update_computer_status = _libdrqueue.update_computer_status
update_computer_limits = _libdrqueue.update_computer_limits
register_slave = _libdrqueue.register_slave
request_comp_xfer = _libdrqueue.request_comp_xfer
request_computer_list = _libdrqueue.request_computer_list
register_job = _libdrqueue.register_job
request_job_available = _libdrqueue.request_job_available
request_task_finished = _libdrqueue.request_task_finished
request_job_list = _libdrqueue.request_job_list
request_job_delete = _libdrqueue.request_job_delete
request_job_stop = _libdrqueue.request_job_stop
request_job_hstop = _libdrqueue.request_job_hstop
request_job_continue = _libdrqueue.request_job_continue
request_job_rerun = _libdrqueue.request_job_rerun
request_job_xfer = _libdrqueue.request_job_xfer
request_job_xferfi = _libdrqueue.request_job_xferfi
request_job_frame_waiting = _libdrqueue.request_job_frame_waiting
request_job_frame_kill = _libdrqueue.request_job_frame_kill
request_job_frame_finish = _libdrqueue.request_job_frame_finish
request_job_frame_kill_finish = _libdrqueue.request_job_frame_kill_finish
request_job_frame_info = _libdrqueue.request_job_frame_info
request_slavexit = _libdrqueue.request_slavexit
request_job_sesupdate = _libdrqueue.request_job_sesupdate
request_job_limits_nmaxcpus_set = _libdrqueue.request_job_limits_nmaxcpus_set
request_job_limits_nmaxcpuscomputer_set = _libdrqueue.request_job_limits_nmaxcpuscomputer_set
request_job_limits_memory_set = _libdrqueue.request_job_limits_memory_set
request_job_limits_pool_set = _libdrqueue.request_job_limits_pool_set
request_job_priority_update = _libdrqueue.request_job_priority_update
request_job_frame_reset_requeued = _libdrqueue.request_job_frame_reset_requeued
request_job_add_blocked_host = _libdrqueue.request_job_add_blocked_host
request_job_delete_blocked_host = _libdrqueue.request_job_delete_blocked_host
request_job_list_blocked_host = _libdrqueue.request_job_list_blocked_host
request_job_envvars = _libdrqueue.request_job_envvars
request_job_block_host_by_name = _libdrqueue.request_job_block_host_by_name
request_job_unblock_host_by_name = _libdrqueue.request_job_unblock_host_by_name
request_job_name = _libdrqueue.request_job_name
request_slave_killtask = _libdrqueue.request_slave_killtask
request_slave_limits_enabled_set = _libdrqueue.request_slave_limits_enabled_set
request_slave_limits_nmaxcpus_set = _libdrqueue.request_slave_limits_nmaxcpus_set
request_slave_limits_maxfreeloadcpu_set = _libdrqueue.request_slave_limits_maxfreeloadcpu_set
request_slave_limits_autoenable_set = _libdrqueue.request_slave_limits_autoenable_set
request_slave_limits_pool_add = _libdrqueue.request_slave_limits_pool_add
request_slave_limits_pool_remove = _libdrqueue.request_slave_limits_pool_remove
request_slave_job_available = _libdrqueue.request_slave_job_available
request_all_slaves_job_available = _libdrqueue.request_all_slaves_job_available
handle_rs_r_killtask = _libdrqueue.handle_rs_r_killtask
handle_rs_r_setenabled = _libdrqueue.handle_rs_r_setenabled
handle_rs_r_setnmaxcpus = _libdrqueue.handle_rs_r_setnmaxcpus
handle_rs_r_setmaxfreeloadcpu = _libdrqueue.handle_rs_r_setmaxfreeloadcpu
handle_rs_r_setautoenable = _libdrqueue.handle_rs_r_setautoenable
handle_rs_r_limitspooladd = _libdrqueue.handle_rs_r_limitspooladd
handle_rs_r_limitspoolremove = _libdrqueue.handle_rs_r_limitspoolremove
SHELL_NAME = _libdrqueue.SHELL_NAME
SHELL_PATH = _libdrqueue.SHELL_PATH
BASE_CONF_PATH = _libdrqueue.BASE_CONF_PATH
BASE_CONF_EXT = _libdrqueue.BASE_CONF_EXT
DEFAULT_POOL = _libdrqueue.DEFAULT_POOL
MASTER = _libdrqueue.MASTER
SLAVE = _libdrqueue.SLAVE
SLAVE_CHANDLER = _libdrqueue.SLAVE_CHANDLER
SLAVE_LAUNCHER = _libdrqueue.SLAVE_LAUNCHER
CLIENT = _libdrqueue.CLIENT
MAXNAMELEN = _libdrqueue.MAXNAMELEN
MAXCMDLEN = _libdrqueue.MAXCMDLEN
BUFFERLEN = _libdrqueue.BUFFERLEN
MAXJOBS = _libdrqueue.MAXJOBS
MAXCOMPUTERS = _libdrqueue.MAXCOMPUTERS
MAXTASKS = _libdrqueue.MAXTASKS
MASTERPORT = _libdrqueue.MASTERPORT
SLAVEPORT = _libdrqueue.SLAVEPORT
SLAVEDELAY = _libdrqueue.SLAVEDELAY
MAXTIMECONNECTION = _libdrqueue.MAXTIMECONNECTION
MASTERCCHECKSDELAY = _libdrqueue.MASTERCCHECKSDELAY
MAXTIMENOCONN = _libdrqueue.MAXTIMENOCONN
MAXLISTEN = _libdrqueue.MAXLISTEN
MAXLOADAVG = _libdrqueue.MAXLOADAVG
DFLTAVGFTIME = _libdrqueue.DFLTAVGFTIME
MASTERNCHILDREN = _libdrqueue.MASTERNCHILDREN
AE_DELAY = _libdrqueue.AE_DELAY
AE_HOUR = _libdrqueue.AE_HOUR
AE_MIN = _libdrqueue.AE_MIN
FS_WAITING = _libdrqueue.FS_WAITING
FS_ASSIGNED = _libdrqueue.FS_ASSIGNED
FS_ERROR = _libdrqueue.FS_ERROR
FS_FINISHED = _libdrqueue.FS_FINISHED
class frame_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, frame_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, frame_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _libdrqueue.frame_info_status_set
    __swig_getmethods__["status"] = _libdrqueue.frame_info_status_get
    if _newclass:status = _swig_property(_libdrqueue.frame_info_status_get, _libdrqueue.frame_info_status_set)
    __swig_setmethods__["start_time"] = _libdrqueue.frame_info_start_time_set
    __swig_getmethods__["start_time"] = _libdrqueue.frame_info_start_time_get
    if _newclass:start_time = _swig_property(_libdrqueue.frame_info_start_time_get, _libdrqueue.frame_info_start_time_set)
    __swig_setmethods__["end_time"] = _libdrqueue.frame_info_end_time_set
    __swig_getmethods__["end_time"] = _libdrqueue.frame_info_end_time_get
    if _newclass:end_time = _swig_property(_libdrqueue.frame_info_end_time_get, _libdrqueue.frame_info_end_time_set)
    __swig_setmethods__["exitcode"] = _libdrqueue.frame_info_exitcode_set
    __swig_getmethods__["exitcode"] = _libdrqueue.frame_info_exitcode_get
    if _newclass:exitcode = _swig_property(_libdrqueue.frame_info_exitcode_get, _libdrqueue.frame_info_exitcode_set)
    __swig_setmethods__["icomp"] = _libdrqueue.frame_info_icomp_set
    __swig_getmethods__["icomp"] = _libdrqueue.frame_info_icomp_get
    if _newclass:icomp = _swig_property(_libdrqueue.frame_info_icomp_get, _libdrqueue.frame_info_icomp_set)
    __swig_setmethods__["itask"] = _libdrqueue.frame_info_itask_set
    __swig_getmethods__["itask"] = _libdrqueue.frame_info_itask_get
    if _newclass:itask = _swig_property(_libdrqueue.frame_info_itask_get, _libdrqueue.frame_info_itask_set)
    __swig_setmethods__["requeued"] = _libdrqueue.frame_info_requeued_set
    __swig_getmethods__["requeued"] = _libdrqueue.frame_info_requeued_get
    if _newclass:requeued = _swig_property(_libdrqueue.frame_info_requeued_get, _libdrqueue.frame_info_requeued_set)
    __swig_setmethods__["flags"] = _libdrqueue.frame_info_flags_set
    __swig_getmethods__["flags"] = _libdrqueue.frame_info_flags_get
    if _newclass:flags = _swig_property(_libdrqueue.frame_info_flags_get, _libdrqueue.frame_info_flags_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_frame_info(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_frame_info
    __del__ = lambda self : None;
frame_info_swigregister = _libdrqueue.frame_info_swigregister
frame_info_swigregister(frame_info)

FF_REQUEUE = _libdrqueue.FF_REQUEUE
class blocked_host(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, blocked_host, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, blocked_host, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _libdrqueue.blocked_host_name_set
    __swig_getmethods__["name"] = _libdrqueue.blocked_host_name_get
    if _newclass:name = _swig_property(_libdrqueue.blocked_host_name_get, _libdrqueue.blocked_host_name_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_blocked_host(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_blocked_host
    __del__ = lambda self : None;
blocked_host_swigregister = _libdrqueue.blocked_host_swigregister
blocked_host_swigregister(blocked_host)

class job_limits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, job_limits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, job_limits, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nmaxcpus"] = _libdrqueue.job_limits_nmaxcpus_set
    __swig_getmethods__["nmaxcpus"] = _libdrqueue.job_limits_nmaxcpus_get
    if _newclass:nmaxcpus = _swig_property(_libdrqueue.job_limits_nmaxcpus_get, _libdrqueue.job_limits_nmaxcpus_set)
    __swig_setmethods__["nmaxcpuscomputer"] = _libdrqueue.job_limits_nmaxcpuscomputer_set
    __swig_getmethods__["nmaxcpuscomputer"] = _libdrqueue.job_limits_nmaxcpuscomputer_get
    if _newclass:nmaxcpuscomputer = _swig_property(_libdrqueue.job_limits_nmaxcpuscomputer_get, _libdrqueue.job_limits_nmaxcpuscomputer_set)
    __swig_setmethods__["os_flags"] = _libdrqueue.job_limits_os_flags_set
    __swig_getmethods__["os_flags"] = _libdrqueue.job_limits_os_flags_get
    if _newclass:os_flags = _swig_property(_libdrqueue.job_limits_os_flags_get, _libdrqueue.job_limits_os_flags_set)
    __swig_setmethods__["memory"] = _libdrqueue.job_limits_memory_set
    __swig_getmethods__["memory"] = _libdrqueue.job_limits_memory_get
    if _newclass:memory = _swig_property(_libdrqueue.job_limits_memory_get, _libdrqueue.job_limits_memory_set)
    __swig_setmethods__["pool"] = _libdrqueue.job_limits_pool_set
    __swig_getmethods__["pool"] = _libdrqueue.job_limits_pool_get
    if _newclass:pool = _swig_property(_libdrqueue.job_limits_pool_get, _libdrqueue.job_limits_pool_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_job_limits(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_job_limits
    __del__ = lambda self : None;
job_limits_swigregister = _libdrqueue.job_limits_swigregister
job_limits_swigregister(job_limits)

class koj_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info, name)
    __repr__ = _swig_repr
    __swig_getmethods__["xsi"] = _libdrqueue.koj_info_xsi_get
    if _newclass:xsi = _swig_property(_libdrqueue.koj_info_xsi_get)
    __swig_getmethods__["turtle"] = _libdrqueue.koj_info_turtle_get
    if _newclass:turtle = _swig_property(_libdrqueue.koj_info_turtle_get)
    __swig_getmethods__["shake"] = _libdrqueue.koj_info_shake_get
    if _newclass:shake = _swig_property(_libdrqueue.koj_info_shake_get)
    __swig_getmethods__["aftereffects"] = _libdrqueue.koj_info_aftereffects_get
    if _newclass:aftereffects = _swig_property(_libdrqueue.koj_info_aftereffects_get)
    __swig_getmethods__["mantra"] = _libdrqueue.koj_info_mantra_get
    if _newclass:mantra = _swig_property(_libdrqueue.koj_info_mantra_get)
    __swig_getmethods__["aqsis"] = _libdrqueue.koj_info_aqsis_get
    if _newclass:aqsis = _swig_property(_libdrqueue.koj_info_aqsis_get)
    __swig_getmethods__["terragen"] = _libdrqueue.koj_info_terragen_get
    if _newclass:terragen = _swig_property(_libdrqueue.koj_info_terragen_get)
    __swig_getmethods__["nuke"] = _libdrqueue.koj_info_nuke_get
    if _newclass:nuke = _swig_property(_libdrqueue.koj_info_nuke_get)
    __swig_getmethods__["lightwave"] = _libdrqueue.koj_info_lightwave_get
    if _newclass:lightwave = _swig_property(_libdrqueue.koj_info_lightwave_get)
    __swig_getmethods__["threedelight"] = _libdrqueue.koj_info_threedelight_get
    if _newclass:threedelight = _swig_property(_libdrqueue.koj_info_threedelight_get)
    __swig_getmethods__["pixie"] = _libdrqueue.koj_info_pixie_get
    if _newclass:pixie = _swig_property(_libdrqueue.koj_info_pixie_get)
    __swig_getmethods__["bmrt"] = _libdrqueue.koj_info_bmrt_get
    if _newclass:bmrt = _swig_property(_libdrqueue.koj_info_bmrt_get)
    __swig_getmethods__["blender"] = _libdrqueue.koj_info_blender_get
    if _newclass:blender = _swig_property(_libdrqueue.koj_info_blender_get)
    __swig_getmethods__["mentalray"] = _libdrqueue.koj_info_mentalray_get
    if _newclass:mentalray = _swig_property(_libdrqueue.koj_info_mentalray_get)
    __swig_getmethods__["maya"] = _libdrqueue.koj_info_maya_get
    if _newclass:maya = _swig_property(_libdrqueue.koj_info_maya_get)
    __swig_getmethods__["general"] = _libdrqueue.koj_info_general_get
    if _newclass:general = _swig_property(_libdrqueue.koj_info_general_get)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info
    __del__ = lambda self : None;
koj_info_swigregister = _libdrqueue.koj_info_swigregister
koj_info_swigregister(koj_info)

class koj_info_xsi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info_xsi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info_xsi, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scene"] = _libdrqueue.koj_info_xsi_scene_set
    __swig_getmethods__["scene"] = _libdrqueue.koj_info_xsi_scene_get
    if _newclass:scene = _swig_property(_libdrqueue.koj_info_xsi_scene_get, _libdrqueue.koj_info_xsi_scene_set)
    __swig_setmethods__["xsipass"] = _libdrqueue.koj_info_xsi_xsipass_set
    __swig_getmethods__["xsipass"] = _libdrqueue.koj_info_xsi_xsipass_get
    if _newclass:xsipass = _swig_property(_libdrqueue.koj_info_xsi_xsipass_get, _libdrqueue.koj_info_xsi_xsipass_set)
    __swig_setmethods__["renderdir"] = _libdrqueue.koj_info_xsi_renderdir_set
    __swig_getmethods__["renderdir"] = _libdrqueue.koj_info_xsi_renderdir_get
    if _newclass:renderdir = _swig_property(_libdrqueue.koj_info_xsi_renderdir_get, _libdrqueue.koj_info_xsi_renderdir_set)
    __swig_setmethods__["image"] = _libdrqueue.koj_info_xsi_image_set
    __swig_getmethods__["image"] = _libdrqueue.koj_info_xsi_image_get
    if _newclass:image = _swig_property(_libdrqueue.koj_info_xsi_image_get, _libdrqueue.koj_info_xsi_image_set)
    __swig_setmethods__["imageExt"] = _libdrqueue.koj_info_xsi_imageExt_set
    __swig_getmethods__["imageExt"] = _libdrqueue.koj_info_xsi_imageExt_get
    if _newclass:imageExt = _swig_property(_libdrqueue.koj_info_xsi_imageExt_get, _libdrqueue.koj_info_xsi_imageExt_set)
    __swig_setmethods__["viewcmd"] = _libdrqueue.koj_info_xsi_viewcmd_set
    __swig_getmethods__["viewcmd"] = _libdrqueue.koj_info_xsi_viewcmd_get
    if _newclass:viewcmd = _swig_property(_libdrqueue.koj_info_xsi_viewcmd_get, _libdrqueue.koj_info_xsi_viewcmd_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info_xsi(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info_xsi
    __del__ = lambda self : None;
koj_info_xsi_swigregister = _libdrqueue.koj_info_xsi_swigregister
koj_info_xsi_swigregister(koj_info_xsi)

class koj_info_turtle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info_turtle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info_turtle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scene"] = _libdrqueue.koj_info_turtle_scene_set
    __swig_getmethods__["scene"] = _libdrqueue.koj_info_turtle_scene_get
    if _newclass:scene = _swig_property(_libdrqueue.koj_info_turtle_scene_get, _libdrqueue.koj_info_turtle_scene_set)
    __swig_setmethods__["renderdir"] = _libdrqueue.koj_info_turtle_renderdir_set
    __swig_getmethods__["renderdir"] = _libdrqueue.koj_info_turtle_renderdir_get
    if _newclass:renderdir = _swig_property(_libdrqueue.koj_info_turtle_renderdir_get, _libdrqueue.koj_info_turtle_renderdir_set)
    __swig_setmethods__["projectdir"] = _libdrqueue.koj_info_turtle_projectdir_set
    __swig_getmethods__["projectdir"] = _libdrqueue.koj_info_turtle_projectdir_get
    if _newclass:projectdir = _swig_property(_libdrqueue.koj_info_turtle_projectdir_get, _libdrqueue.koj_info_turtle_projectdir_set)
    __swig_setmethods__["camera"] = _libdrqueue.koj_info_turtle_camera_set
    __swig_getmethods__["camera"] = _libdrqueue.koj_info_turtle_camera_get
    if _newclass:camera = _swig_property(_libdrqueue.koj_info_turtle_camera_get, _libdrqueue.koj_info_turtle_camera_set)
    __swig_setmethods__["resx"] = _libdrqueue.koj_info_turtle_resx_set
    __swig_getmethods__["resx"] = _libdrqueue.koj_info_turtle_resx_get
    if _newclass:resx = _swig_property(_libdrqueue.koj_info_turtle_resx_get, _libdrqueue.koj_info_turtle_resx_set)
    __swig_setmethods__["resy"] = _libdrqueue.koj_info_turtle_resy_set
    __swig_getmethods__["resy"] = _libdrqueue.koj_info_turtle_resy_get
    if _newclass:resy = _swig_property(_libdrqueue.koj_info_turtle_resy_get, _libdrqueue.koj_info_turtle_resy_set)
    __swig_setmethods__["image"] = _libdrqueue.koj_info_turtle_image_set
    __swig_getmethods__["image"] = _libdrqueue.koj_info_turtle_image_get
    if _newclass:image = _swig_property(_libdrqueue.koj_info_turtle_image_get, _libdrqueue.koj_info_turtle_image_set)
    __swig_setmethods__["viewcmd"] = _libdrqueue.koj_info_turtle_viewcmd_set
    __swig_getmethods__["viewcmd"] = _libdrqueue.koj_info_turtle_viewcmd_get
    if _newclass:viewcmd = _swig_property(_libdrqueue.koj_info_turtle_viewcmd_get, _libdrqueue.koj_info_turtle_viewcmd_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info_turtle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info_turtle
    __del__ = lambda self : None;
koj_info_turtle_swigregister = _libdrqueue.koj_info_turtle_swigregister
koj_info_turtle_swigregister(koj_info_turtle)

class koj_info_shake(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info_shake, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info_shake, name)
    __repr__ = _swig_repr
    __swig_setmethods__["script"] = _libdrqueue.koj_info_shake_script_set
    __swig_getmethods__["script"] = _libdrqueue.koj_info_shake_script_get
    if _newclass:script = _swig_property(_libdrqueue.koj_info_shake_script_get, _libdrqueue.koj_info_shake_script_set)
    __swig_setmethods__["viewcmd"] = _libdrqueue.koj_info_shake_viewcmd_set
    __swig_getmethods__["viewcmd"] = _libdrqueue.koj_info_shake_viewcmd_get
    if _newclass:viewcmd = _swig_property(_libdrqueue.koj_info_shake_viewcmd_get, _libdrqueue.koj_info_shake_viewcmd_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info_shake(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info_shake
    __del__ = lambda self : None;
koj_info_shake_swigregister = _libdrqueue.koj_info_shake_swigregister
koj_info_shake_swigregister(koj_info_shake)

class koj_info_aftereffects(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info_aftereffects, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info_aftereffects, name)
    __repr__ = _swig_repr
    __swig_setmethods__["project"] = _libdrqueue.koj_info_aftereffects_project_set
    __swig_getmethods__["project"] = _libdrqueue.koj_info_aftereffects_project_get
    if _newclass:project = _swig_property(_libdrqueue.koj_info_aftereffects_project_get, _libdrqueue.koj_info_aftereffects_project_set)
    __swig_setmethods__["comp"] = _libdrqueue.koj_info_aftereffects_comp_set
    __swig_getmethods__["comp"] = _libdrqueue.koj_info_aftereffects_comp_get
    if _newclass:comp = _swig_property(_libdrqueue.koj_info_aftereffects_comp_get, _libdrqueue.koj_info_aftereffects_comp_set)
    __swig_setmethods__["viewcmd"] = _libdrqueue.koj_info_aftereffects_viewcmd_set
    __swig_getmethods__["viewcmd"] = _libdrqueue.koj_info_aftereffects_viewcmd_get
    if _newclass:viewcmd = _swig_property(_libdrqueue.koj_info_aftereffects_viewcmd_get, _libdrqueue.koj_info_aftereffects_viewcmd_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info_aftereffects(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info_aftereffects
    __del__ = lambda self : None;
koj_info_aftereffects_swigregister = _libdrqueue.koj_info_aftereffects_swigregister
koj_info_aftereffects_swigregister(koj_info_aftereffects)

class koj_info_mantra(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info_mantra, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info_mantra, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scene"] = _libdrqueue.koj_info_mantra_scene_set
    __swig_getmethods__["scene"] = _libdrqueue.koj_info_mantra_scene_get
    if _newclass:scene = _swig_property(_libdrqueue.koj_info_mantra_scene_get, _libdrqueue.koj_info_mantra_scene_set)
    __swig_setmethods__["renderdir"] = _libdrqueue.koj_info_mantra_renderdir_set
    __swig_getmethods__["renderdir"] = _libdrqueue.koj_info_mantra_renderdir_get
    if _newclass:renderdir = _swig_property(_libdrqueue.koj_info_mantra_renderdir_get, _libdrqueue.koj_info_mantra_renderdir_set)
    __swig_setmethods__["viewcmd"] = _libdrqueue.koj_info_mantra_viewcmd_set
    __swig_getmethods__["viewcmd"] = _libdrqueue.koj_info_mantra_viewcmd_get
    if _newclass:viewcmd = _swig_property(_libdrqueue.koj_info_mantra_viewcmd_get, _libdrqueue.koj_info_mantra_viewcmd_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info_mantra(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info_mantra
    __del__ = lambda self : None;
koj_info_mantra_swigregister = _libdrqueue.koj_info_mantra_swigregister
koj_info_mantra_swigregister(koj_info_mantra)

class koj_info_aqsis(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info_aqsis, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info_aqsis, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scene"] = _libdrqueue.koj_info_aqsis_scene_set
    __swig_getmethods__["scene"] = _libdrqueue.koj_info_aqsis_scene_get
    if _newclass:scene = _swig_property(_libdrqueue.koj_info_aqsis_scene_get, _libdrqueue.koj_info_aqsis_scene_set)
    __swig_setmethods__["viewcmd"] = _libdrqueue.koj_info_aqsis_viewcmd_set
    __swig_getmethods__["viewcmd"] = _libdrqueue.koj_info_aqsis_viewcmd_get
    if _newclass:viewcmd = _swig_property(_libdrqueue.koj_info_aqsis_viewcmd_get, _libdrqueue.koj_info_aqsis_viewcmd_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info_aqsis(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info_aqsis
    __del__ = lambda self : None;
koj_info_aqsis_swigregister = _libdrqueue.koj_info_aqsis_swigregister
koj_info_aqsis_swigregister(koj_info_aqsis)

class koj_info_terragen(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info_terragen, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info_terragen, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scriptfile"] = _libdrqueue.koj_info_terragen_scriptfile_set
    __swig_getmethods__["scriptfile"] = _libdrqueue.koj_info_terragen_scriptfile_get
    if _newclass:scriptfile = _swig_property(_libdrqueue.koj_info_terragen_scriptfile_get, _libdrqueue.koj_info_terragen_scriptfile_set)
    __swig_setmethods__["worldfile"] = _libdrqueue.koj_info_terragen_worldfile_set
    __swig_getmethods__["worldfile"] = _libdrqueue.koj_info_terragen_worldfile_get
    if _newclass:worldfile = _swig_property(_libdrqueue.koj_info_terragen_worldfile_get, _libdrqueue.koj_info_terragen_worldfile_set)
    __swig_setmethods__["terrainfile"] = _libdrqueue.koj_info_terragen_terrainfile_set
    __swig_getmethods__["terrainfile"] = _libdrqueue.koj_info_terragen_terrainfile_get
    if _newclass:terrainfile = _swig_property(_libdrqueue.koj_info_terragen_terrainfile_get, _libdrqueue.koj_info_terragen_terrainfile_set)
    __swig_setmethods__["viewcmd"] = _libdrqueue.koj_info_terragen_viewcmd_set
    __swig_getmethods__["viewcmd"] = _libdrqueue.koj_info_terragen_viewcmd_get
    if _newclass:viewcmd = _swig_property(_libdrqueue.koj_info_terragen_viewcmd_get, _libdrqueue.koj_info_terragen_viewcmd_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info_terragen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info_terragen
    __del__ = lambda self : None;
koj_info_terragen_swigregister = _libdrqueue.koj_info_terragen_swigregister
koj_info_terragen_swigregister(koj_info_terragen)

class koj_info_nuke(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info_nuke, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info_nuke, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scene"] = _libdrqueue.koj_info_nuke_scene_set
    __swig_getmethods__["scene"] = _libdrqueue.koj_info_nuke_scene_get
    if _newclass:scene = _swig_property(_libdrqueue.koj_info_nuke_scene_get, _libdrqueue.koj_info_nuke_scene_set)
    __swig_setmethods__["viewcmd"] = _libdrqueue.koj_info_nuke_viewcmd_set
    __swig_getmethods__["viewcmd"] = _libdrqueue.koj_info_nuke_viewcmd_get
    if _newclass:viewcmd = _swig_property(_libdrqueue.koj_info_nuke_viewcmd_get, _libdrqueue.koj_info_nuke_viewcmd_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info_nuke(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info_nuke
    __del__ = lambda self : None;
koj_info_nuke_swigregister = _libdrqueue.koj_info_nuke_swigregister
koj_info_nuke_swigregister(koj_info_nuke)

class koj_info_lightwave(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info_lightwave, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info_lightwave, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scene"] = _libdrqueue.koj_info_lightwave_scene_set
    __swig_getmethods__["scene"] = _libdrqueue.koj_info_lightwave_scene_get
    if _newclass:scene = _swig_property(_libdrqueue.koj_info_lightwave_scene_get, _libdrqueue.koj_info_lightwave_scene_set)
    __swig_setmethods__["projectdir"] = _libdrqueue.koj_info_lightwave_projectdir_set
    __swig_getmethods__["projectdir"] = _libdrqueue.koj_info_lightwave_projectdir_get
    if _newclass:projectdir = _swig_property(_libdrqueue.koj_info_lightwave_projectdir_get, _libdrqueue.koj_info_lightwave_projectdir_set)
    __swig_setmethods__["configdir"] = _libdrqueue.koj_info_lightwave_configdir_set
    __swig_getmethods__["configdir"] = _libdrqueue.koj_info_lightwave_configdir_get
    if _newclass:configdir = _swig_property(_libdrqueue.koj_info_lightwave_configdir_get, _libdrqueue.koj_info_lightwave_configdir_set)
    __swig_setmethods__["viewcmd"] = _libdrqueue.koj_info_lightwave_viewcmd_set
    __swig_getmethods__["viewcmd"] = _libdrqueue.koj_info_lightwave_viewcmd_get
    if _newclass:viewcmd = _swig_property(_libdrqueue.koj_info_lightwave_viewcmd_get, _libdrqueue.koj_info_lightwave_viewcmd_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info_lightwave(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info_lightwave
    __del__ = lambda self : None;
koj_info_lightwave_swigregister = _libdrqueue.koj_info_lightwave_swigregister
koj_info_lightwave_swigregister(koj_info_lightwave)

class koj_info_threedelight(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info_threedelight, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info_threedelight, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scene"] = _libdrqueue.koj_info_threedelight_scene_set
    __swig_getmethods__["scene"] = _libdrqueue.koj_info_threedelight_scene_get
    if _newclass:scene = _swig_property(_libdrqueue.koj_info_threedelight_scene_get, _libdrqueue.koj_info_threedelight_scene_set)
    __swig_setmethods__["viewcmd"] = _libdrqueue.koj_info_threedelight_viewcmd_set
    __swig_getmethods__["viewcmd"] = _libdrqueue.koj_info_threedelight_viewcmd_get
    if _newclass:viewcmd = _swig_property(_libdrqueue.koj_info_threedelight_viewcmd_get, _libdrqueue.koj_info_threedelight_viewcmd_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info_threedelight(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info_threedelight
    __del__ = lambda self : None;
koj_info_threedelight_swigregister = _libdrqueue.koj_info_threedelight_swigregister
koj_info_threedelight_swigregister(koj_info_threedelight)

class koj_info_pixie(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info_pixie, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info_pixie, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scene"] = _libdrqueue.koj_info_pixie_scene_set
    __swig_getmethods__["scene"] = _libdrqueue.koj_info_pixie_scene_get
    if _newclass:scene = _swig_property(_libdrqueue.koj_info_pixie_scene_get, _libdrqueue.koj_info_pixie_scene_set)
    __swig_setmethods__["viewcmd"] = _libdrqueue.koj_info_pixie_viewcmd_set
    __swig_getmethods__["viewcmd"] = _libdrqueue.koj_info_pixie_viewcmd_get
    if _newclass:viewcmd = _swig_property(_libdrqueue.koj_info_pixie_viewcmd_get, _libdrqueue.koj_info_pixie_viewcmd_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info_pixie(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info_pixie
    __del__ = lambda self : None;
koj_info_pixie_swigregister = _libdrqueue.koj_info_pixie_swigregister
koj_info_pixie_swigregister(koj_info_pixie)

class koj_info_bmrt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info_bmrt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info_bmrt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scene"] = _libdrqueue.koj_info_bmrt_scene_set
    __swig_getmethods__["scene"] = _libdrqueue.koj_info_bmrt_scene_get
    if _newclass:scene = _swig_property(_libdrqueue.koj_info_bmrt_scene_get, _libdrqueue.koj_info_bmrt_scene_set)
    __swig_setmethods__["viewcmd"] = _libdrqueue.koj_info_bmrt_viewcmd_set
    __swig_getmethods__["viewcmd"] = _libdrqueue.koj_info_bmrt_viewcmd_get
    if _newclass:viewcmd = _swig_property(_libdrqueue.koj_info_bmrt_viewcmd_get, _libdrqueue.koj_info_bmrt_viewcmd_set)
    __swig_setmethods__["custom_crop"] = _libdrqueue.koj_info_bmrt_custom_crop_set
    __swig_getmethods__["custom_crop"] = _libdrqueue.koj_info_bmrt_custom_crop_get
    if _newclass:custom_crop = _swig_property(_libdrqueue.koj_info_bmrt_custom_crop_get, _libdrqueue.koj_info_bmrt_custom_crop_set)
    __swig_setmethods__["xmin"] = _libdrqueue.koj_info_bmrt_xmin_set
    __swig_getmethods__["xmin"] = _libdrqueue.koj_info_bmrt_xmin_get
    if _newclass:xmin = _swig_property(_libdrqueue.koj_info_bmrt_xmin_get, _libdrqueue.koj_info_bmrt_xmin_set)
    __swig_setmethods__["xmax"] = _libdrqueue.koj_info_bmrt_xmax_set
    __swig_getmethods__["xmax"] = _libdrqueue.koj_info_bmrt_xmax_get
    if _newclass:xmax = _swig_property(_libdrqueue.koj_info_bmrt_xmax_get, _libdrqueue.koj_info_bmrt_xmax_set)
    __swig_setmethods__["ymin"] = _libdrqueue.koj_info_bmrt_ymin_set
    __swig_getmethods__["ymin"] = _libdrqueue.koj_info_bmrt_ymin_get
    if _newclass:ymin = _swig_property(_libdrqueue.koj_info_bmrt_ymin_get, _libdrqueue.koj_info_bmrt_ymin_set)
    __swig_setmethods__["ymax"] = _libdrqueue.koj_info_bmrt_ymax_set
    __swig_getmethods__["ymax"] = _libdrqueue.koj_info_bmrt_ymax_get
    if _newclass:ymax = _swig_property(_libdrqueue.koj_info_bmrt_ymax_get, _libdrqueue.koj_info_bmrt_ymax_set)
    __swig_setmethods__["custom_samples"] = _libdrqueue.koj_info_bmrt_custom_samples_set
    __swig_getmethods__["custom_samples"] = _libdrqueue.koj_info_bmrt_custom_samples_get
    if _newclass:custom_samples = _swig_property(_libdrqueue.koj_info_bmrt_custom_samples_get, _libdrqueue.koj_info_bmrt_custom_samples_set)
    __swig_setmethods__["xsamples"] = _libdrqueue.koj_info_bmrt_xsamples_set
    __swig_getmethods__["xsamples"] = _libdrqueue.koj_info_bmrt_xsamples_get
    if _newclass:xsamples = _swig_property(_libdrqueue.koj_info_bmrt_xsamples_get, _libdrqueue.koj_info_bmrt_xsamples_set)
    __swig_setmethods__["ysamples"] = _libdrqueue.koj_info_bmrt_ysamples_set
    __swig_getmethods__["ysamples"] = _libdrqueue.koj_info_bmrt_ysamples_get
    if _newclass:ysamples = _swig_property(_libdrqueue.koj_info_bmrt_ysamples_get, _libdrqueue.koj_info_bmrt_ysamples_set)
    __swig_setmethods__["disp_stats"] = _libdrqueue.koj_info_bmrt_disp_stats_set
    __swig_getmethods__["disp_stats"] = _libdrqueue.koj_info_bmrt_disp_stats_get
    if _newclass:disp_stats = _swig_property(_libdrqueue.koj_info_bmrt_disp_stats_get, _libdrqueue.koj_info_bmrt_disp_stats_set)
    __swig_setmethods__["verbose"] = _libdrqueue.koj_info_bmrt_verbose_set
    __swig_getmethods__["verbose"] = _libdrqueue.koj_info_bmrt_verbose_get
    if _newclass:verbose = _swig_property(_libdrqueue.koj_info_bmrt_verbose_get, _libdrqueue.koj_info_bmrt_verbose_set)
    __swig_setmethods__["custom_beep"] = _libdrqueue.koj_info_bmrt_custom_beep_set
    __swig_getmethods__["custom_beep"] = _libdrqueue.koj_info_bmrt_custom_beep_get
    if _newclass:custom_beep = _swig_property(_libdrqueue.koj_info_bmrt_custom_beep_get, _libdrqueue.koj_info_bmrt_custom_beep_set)
    __swig_setmethods__["custom_radiosity"] = _libdrqueue.koj_info_bmrt_custom_radiosity_set
    __swig_getmethods__["custom_radiosity"] = _libdrqueue.koj_info_bmrt_custom_radiosity_get
    if _newclass:custom_radiosity = _swig_property(_libdrqueue.koj_info_bmrt_custom_radiosity_get, _libdrqueue.koj_info_bmrt_custom_radiosity_set)
    __swig_setmethods__["radiosity_samples"] = _libdrqueue.koj_info_bmrt_radiosity_samples_set
    __swig_getmethods__["radiosity_samples"] = _libdrqueue.koj_info_bmrt_radiosity_samples_get
    if _newclass:radiosity_samples = _swig_property(_libdrqueue.koj_info_bmrt_radiosity_samples_get, _libdrqueue.koj_info_bmrt_radiosity_samples_set)
    __swig_setmethods__["custom_raysamples"] = _libdrqueue.koj_info_bmrt_custom_raysamples_set
    __swig_getmethods__["custom_raysamples"] = _libdrqueue.koj_info_bmrt_custom_raysamples_get
    if _newclass:custom_raysamples = _swig_property(_libdrqueue.koj_info_bmrt_custom_raysamples_get, _libdrqueue.koj_info_bmrt_custom_raysamples_set)
    __swig_setmethods__["raysamples"] = _libdrqueue.koj_info_bmrt_raysamples_set
    __swig_getmethods__["raysamples"] = _libdrqueue.koj_info_bmrt_raysamples_get
    if _newclass:raysamples = _swig_property(_libdrqueue.koj_info_bmrt_raysamples_get, _libdrqueue.koj_info_bmrt_raysamples_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info_bmrt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info_bmrt
    __del__ = lambda self : None;
koj_info_bmrt_swigregister = _libdrqueue.koj_info_bmrt_swigregister
koj_info_bmrt_swigregister(koj_info_bmrt)

class koj_info_blender(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info_blender, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info_blender, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scene"] = _libdrqueue.koj_info_blender_scene_set
    __swig_getmethods__["scene"] = _libdrqueue.koj_info_blender_scene_get
    if _newclass:scene = _swig_property(_libdrqueue.koj_info_blender_scene_get, _libdrqueue.koj_info_blender_scene_set)
    __swig_setmethods__["viewcmd"] = _libdrqueue.koj_info_blender_viewcmd_set
    __swig_getmethods__["viewcmd"] = _libdrqueue.koj_info_blender_viewcmd_get
    if _newclass:viewcmd = _swig_property(_libdrqueue.koj_info_blender_viewcmd_get, _libdrqueue.koj_info_blender_viewcmd_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info_blender(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info_blender
    __del__ = lambda self : None;
koj_info_blender_swigregister = _libdrqueue.koj_info_blender_swigregister
koj_info_blender_swigregister(koj_info_blender)

class koj_info_mentalray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info_mentalray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info_mentalray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scene"] = _libdrqueue.koj_info_mentalray_scene_set
    __swig_getmethods__["scene"] = _libdrqueue.koj_info_mentalray_scene_get
    if _newclass:scene = _swig_property(_libdrqueue.koj_info_mentalray_scene_get, _libdrqueue.koj_info_mentalray_scene_set)
    __swig_setmethods__["renderdir"] = _libdrqueue.koj_info_mentalray_renderdir_set
    __swig_getmethods__["renderdir"] = _libdrqueue.koj_info_mentalray_renderdir_get
    if _newclass:renderdir = _swig_property(_libdrqueue.koj_info_mentalray_renderdir_get, _libdrqueue.koj_info_mentalray_renderdir_set)
    __swig_setmethods__["image"] = _libdrqueue.koj_info_mentalray_image_set
    __swig_getmethods__["image"] = _libdrqueue.koj_info_mentalray_image_get
    if _newclass:image = _swig_property(_libdrqueue.koj_info_mentalray_image_get, _libdrqueue.koj_info_mentalray_image_set)
    __swig_setmethods__["viewcmd"] = _libdrqueue.koj_info_mentalray_viewcmd_set
    __swig_getmethods__["viewcmd"] = _libdrqueue.koj_info_mentalray_viewcmd_get
    if _newclass:viewcmd = _swig_property(_libdrqueue.koj_info_mentalray_viewcmd_get, _libdrqueue.koj_info_mentalray_viewcmd_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info_mentalray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info_mentalray
    __del__ = lambda self : None;
koj_info_mentalray_swigregister = _libdrqueue.koj_info_mentalray_swigregister
koj_info_mentalray_swigregister(koj_info_mentalray)

class koj_info_maya(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info_maya, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info_maya, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scene"] = _libdrqueue.koj_info_maya_scene_set
    __swig_getmethods__["scene"] = _libdrqueue.koj_info_maya_scene_get
    if _newclass:scene = _swig_property(_libdrqueue.koj_info_maya_scene_get, _libdrqueue.koj_info_maya_scene_set)
    __swig_setmethods__["renderdir"] = _libdrqueue.koj_info_maya_renderdir_set
    __swig_getmethods__["renderdir"] = _libdrqueue.koj_info_maya_renderdir_get
    if _newclass:renderdir = _swig_property(_libdrqueue.koj_info_maya_renderdir_get, _libdrqueue.koj_info_maya_renderdir_set)
    __swig_setmethods__["projectdir"] = _libdrqueue.koj_info_maya_projectdir_set
    __swig_getmethods__["projectdir"] = _libdrqueue.koj_info_maya_projectdir_get
    if _newclass:projectdir = _swig_property(_libdrqueue.koj_info_maya_projectdir_get, _libdrqueue.koj_info_maya_projectdir_set)
    __swig_setmethods__["precommand"] = _libdrqueue.koj_info_maya_precommand_set
    __swig_getmethods__["precommand"] = _libdrqueue.koj_info_maya_precommand_get
    if _newclass:precommand = _swig_property(_libdrqueue.koj_info_maya_precommand_get, _libdrqueue.koj_info_maya_precommand_set)
    __swig_setmethods__["postcommand"] = _libdrqueue.koj_info_maya_postcommand_set
    __swig_getmethods__["postcommand"] = _libdrqueue.koj_info_maya_postcommand_get
    if _newclass:postcommand = _swig_property(_libdrqueue.koj_info_maya_postcommand_get, _libdrqueue.koj_info_maya_postcommand_set)
    __swig_setmethods__["image"] = _libdrqueue.koj_info_maya_image_set
    __swig_getmethods__["image"] = _libdrqueue.koj_info_maya_image_get
    if _newclass:image = _swig_property(_libdrqueue.koj_info_maya_image_get, _libdrqueue.koj_info_maya_image_set)
    __swig_setmethods__["viewcmd"] = _libdrqueue.koj_info_maya_viewcmd_set
    __swig_getmethods__["viewcmd"] = _libdrqueue.koj_info_maya_viewcmd_get
    if _newclass:viewcmd = _swig_property(_libdrqueue.koj_info_maya_viewcmd_get, _libdrqueue.koj_info_maya_viewcmd_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info_maya(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info_maya
    __del__ = lambda self : None;
koj_info_maya_swigregister = _libdrqueue.koj_info_maya_swigregister
koj_info_maya_swigregister(koj_info_maya)

class koj_info_general(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, koj_info_general, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, koj_info_general, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scriptdir"] = _libdrqueue.koj_info_general_scriptdir_set
    __swig_getmethods__["scriptdir"] = _libdrqueue.koj_info_general_scriptdir_get
    if _newclass:scriptdir = _swig_property(_libdrqueue.koj_info_general_scriptdir_get, _libdrqueue.koj_info_general_scriptdir_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_koj_info_general(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_koj_info_general
    __del__ = lambda self : None;
koj_info_general_swigregister = _libdrqueue.koj_info_general_swigregister
koj_info_general_swigregister(koj_info_general)

KOJ_GENERAL = _libdrqueue.KOJ_GENERAL
KOJ_MAYA = _libdrqueue.KOJ_MAYA
KOJ_BLENDER = _libdrqueue.KOJ_BLENDER
KOJ_BMRT = _libdrqueue.KOJ_BMRT
KOJ_3DELIGHT = _libdrqueue.KOJ_3DELIGHT
KOJ_PIXIE = _libdrqueue.KOJ_PIXIE
KOJ_MENTALRAY = _libdrqueue.KOJ_MENTALRAY
KOJ_LIGHTWAVE = _libdrqueue.KOJ_LIGHTWAVE
KOJ_AFTEREFFECTS = _libdrqueue.KOJ_AFTEREFFECTS
KOJ_SHAKE = _libdrqueue.KOJ_SHAKE
KOJ_AQSIS = _libdrqueue.KOJ_AQSIS
KOJ_TERRAGEN = _libdrqueue.KOJ_TERRAGEN
KOJ_NUKE = _libdrqueue.KOJ_NUKE
KOJ_TURTLE = _libdrqueue.KOJ_TURTLE
KOJ_MANTRA = _libdrqueue.KOJ_MANTRA
KOJ_XSI = _libdrqueue.KOJ_XSI
JOBSTATUS_WAITING = _libdrqueue.JOBSTATUS_WAITING
JOBSTATUS_ACTIVE = _libdrqueue.JOBSTATUS_ACTIVE
JOBSTATUS_STOPPED = _libdrqueue.JOBSTATUS_STOPPED
JOBSTATUS_FINISHED = _libdrqueue.JOBSTATUS_FINISHED
JF_MAILNOTIFY = _libdrqueue.JF_MAILNOTIFY
JF_MNDIFEMAIL = _libdrqueue.JF_MNDIFEMAIL
JF_JOBDEPEND = _libdrqueue.JF_JOBDEPEND
JF_JOBDELETE = _libdrqueue.JF_JOBDELETE
OSF_ALL = _libdrqueue.OSF_ALL
OSF_IRIX = _libdrqueue.OSF_IRIX
OSF_LINUX = _libdrqueue.OSF_LINUX
OSF_OSX = _libdrqueue.OSF_OSX
OSF_FREEBSD = _libdrqueue.OSF_FREEBSD
OSF_CYGWIN = _libdrqueue.OSF_CYGWIN
class job(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, job, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, job, name)
    __repr__ = _swig_repr
    __swig_setmethods__["used"] = _libdrqueue.job_used_set
    __swig_getmethods__["used"] = _libdrqueue.job_used_get
    if _newclass:used = _swig_property(_libdrqueue.job_used_get, _libdrqueue.job_used_set)
    __swig_setmethods__["id"] = _libdrqueue.job_id_set
    __swig_getmethods__["id"] = _libdrqueue.job_id_get
    if _newclass:id = _swig_property(_libdrqueue.job_id_get, _libdrqueue.job_id_set)
    __swig_setmethods__["nprocs"] = _libdrqueue.job_nprocs_set
    __swig_getmethods__["nprocs"] = _libdrqueue.job_nprocs_get
    if _newclass:nprocs = _swig_property(_libdrqueue.job_nprocs_get, _libdrqueue.job_nprocs_set)
    __swig_setmethods__["status"] = _libdrqueue.job_status_set
    __swig_getmethods__["status"] = _libdrqueue.job_status_get
    if _newclass:status = _swig_property(_libdrqueue.job_status_get, _libdrqueue.job_status_set)
    __swig_setmethods__["priority"] = _libdrqueue.job_priority_set
    __swig_getmethods__["priority"] = _libdrqueue.job_priority_get
    if _newclass:priority = _swig_property(_libdrqueue.job_priority_get, _libdrqueue.job_priority_set)
    __swig_setmethods__["name"] = _libdrqueue.job_name_set
    __swig_getmethods__["name"] = _libdrqueue.job_name_get
    if _newclass:name = _swig_property(_libdrqueue.job_name_get, _libdrqueue.job_name_set)
    __swig_setmethods__["cmd"] = _libdrqueue.job_cmd_set
    __swig_getmethods__["cmd"] = _libdrqueue.job_cmd_get
    if _newclass:cmd = _swig_property(_libdrqueue.job_cmd_get, _libdrqueue.job_cmd_set)
    __swig_setmethods__["owner"] = _libdrqueue.job_owner_set
    __swig_getmethods__["owner"] = _libdrqueue.job_owner_get
    if _newclass:owner = _swig_property(_libdrqueue.job_owner_get, _libdrqueue.job_owner_set)
    __swig_setmethods__["email"] = _libdrqueue.job_email_set
    __swig_getmethods__["email"] = _libdrqueue.job_email_get
    if _newclass:email = _swig_property(_libdrqueue.job_email_get, _libdrqueue.job_email_set)
    __swig_setmethods__["autoRequeue"] = _libdrqueue.job_autoRequeue_set
    __swig_getmethods__["autoRequeue"] = _libdrqueue.job_autoRequeue_get
    if _newclass:autoRequeue = _swig_property(_libdrqueue.job_autoRequeue_get, _libdrqueue.job_autoRequeue_set)
    __swig_setmethods__["koj"] = _libdrqueue.job_koj_set
    __swig_getmethods__["koj"] = _libdrqueue.job_koj_get
    if _newclass:koj = _swig_property(_libdrqueue.job_koj_get, _libdrqueue.job_koj_set)
    __swig_setmethods__["koji"] = _libdrqueue.job_koji_set
    __swig_getmethods__["koji"] = _libdrqueue.job_koji_get
    if _newclass:koji = _swig_property(_libdrqueue.job_koji_get, _libdrqueue.job_koji_set)
    __swig_setmethods__["frame_start"] = _libdrqueue.job_frame_start_set
    __swig_getmethods__["frame_start"] = _libdrqueue.job_frame_start_get
    if _newclass:frame_start = _swig_property(_libdrqueue.job_frame_start_get, _libdrqueue.job_frame_start_set)
    __swig_setmethods__["frame_end"] = _libdrqueue.job_frame_end_set
    __swig_getmethods__["frame_end"] = _libdrqueue.job_frame_end_get
    if _newclass:frame_end = _swig_property(_libdrqueue.job_frame_end_get, _libdrqueue.job_frame_end_set)
    __swig_setmethods__["frame_pad"] = _libdrqueue.job_frame_pad_set
    __swig_getmethods__["frame_pad"] = _libdrqueue.job_frame_pad_get
    if _newclass:frame_pad = _swig_property(_libdrqueue.job_frame_pad_get, _libdrqueue.job_frame_pad_set)
    __swig_setmethods__["frame_step"] = _libdrqueue.job_frame_step_set
    __swig_getmethods__["frame_step"] = _libdrqueue.job_frame_step_get
    if _newclass:frame_step = _swig_property(_libdrqueue.job_frame_step_get, _libdrqueue.job_frame_step_set)
    __swig_setmethods__["fleft"] = _libdrqueue.job_fleft_set
    __swig_getmethods__["fleft"] = _libdrqueue.job_fleft_get
    if _newclass:fleft = _swig_property(_libdrqueue.job_fleft_get, _libdrqueue.job_fleft_set)
    __swig_setmethods__["fdone"] = _libdrqueue.job_fdone_set
    __swig_getmethods__["fdone"] = _libdrqueue.job_fdone_get
    if _newclass:fdone = _swig_property(_libdrqueue.job_fdone_get, _libdrqueue.job_fdone_set)
    __swig_setmethods__["ffailed"] = _libdrqueue.job_ffailed_set
    __swig_getmethods__["ffailed"] = _libdrqueue.job_ffailed_get
    if _newclass:ffailed = _swig_property(_libdrqueue.job_ffailed_get, _libdrqueue.job_ffailed_set)
    __swig_setmethods__["old_fdone"] = _libdrqueue.job_old_fdone_set
    __swig_getmethods__["old_fdone"] = _libdrqueue.job_old_fdone_get
    if _newclass:old_fdone = _swig_property(_libdrqueue.job_old_fdone_get, _libdrqueue.job_old_fdone_set)
    __swig_setmethods__["old_nprocs"] = _libdrqueue.job_old_nprocs_set
    __swig_getmethods__["old_nprocs"] = _libdrqueue.job_old_nprocs_get
    if _newclass:old_nprocs = _swig_property(_libdrqueue.job_old_nprocs_get, _libdrqueue.job_old_nprocs_set)
    __swig_setmethods__["block_size"] = _libdrqueue.job_block_size_set
    __swig_getmethods__["block_size"] = _libdrqueue.job_block_size_get
    if _newclass:block_size = _swig_property(_libdrqueue.job_block_size_get, _libdrqueue.job_block_size_set)
    __swig_setmethods__["submit_time"] = _libdrqueue.job_submit_time_set
    __swig_getmethods__["submit_time"] = _libdrqueue.job_submit_time_get
    if _newclass:submit_time = _swig_property(_libdrqueue.job_submit_time_get, _libdrqueue.job_submit_time_set)
    __swig_setmethods__["avg_frame_time"] = _libdrqueue.job_avg_frame_time_set
    __swig_getmethods__["avg_frame_time"] = _libdrqueue.job_avg_frame_time_get
    if _newclass:avg_frame_time = _swig_property(_libdrqueue.job_avg_frame_time_get, _libdrqueue.job_avg_frame_time_set)
    __swig_setmethods__["est_finish_time"] = _libdrqueue.job_est_finish_time_set
    __swig_getmethods__["est_finish_time"] = _libdrqueue.job_est_finish_time_get
    if _newclass:est_finish_time = _swig_property(_libdrqueue.job_est_finish_time_get, _libdrqueue.job_est_finish_time_set)
    __swig_setmethods__["fishmid"] = _libdrqueue.job_fishmid_set
    __swig_getmethods__["fishmid"] = _libdrqueue.job_fishmid_get
    if _newclass:fishmid = _swig_property(_libdrqueue.job_fishmid_get, _libdrqueue.job_fishmid_set)
    __swig_setmethods__["bhshmid"] = _libdrqueue.job_bhshmid_set
    __swig_getmethods__["bhshmid"] = _libdrqueue.job_bhshmid_get
    if _newclass:bhshmid = _swig_property(_libdrqueue.job_bhshmid_get, _libdrqueue.job_bhshmid_set)
    __swig_setmethods__["nblocked"] = _libdrqueue.job_nblocked_set
    __swig_getmethods__["nblocked"] = _libdrqueue.job_nblocked_get
    if _newclass:nblocked = _swig_property(_libdrqueue.job_nblocked_get, _libdrqueue.job_nblocked_set)
    __swig_setmethods__["flags"] = _libdrqueue.job_flags_set
    __swig_getmethods__["flags"] = _libdrqueue.job_flags_get
    if _newclass:flags = _swig_property(_libdrqueue.job_flags_get, _libdrqueue.job_flags_set)
    __swig_setmethods__["dependid"] = _libdrqueue.job_dependid_set
    __swig_getmethods__["dependid"] = _libdrqueue.job_dependid_get
    if _newclass:dependid = _swig_property(_libdrqueue.job_dependid_get, _libdrqueue.job_dependid_set)
    __swig_setmethods__["limits"] = _libdrqueue.job_limits_set
    __swig_getmethods__["limits"] = _libdrqueue.job_limits_get
    if _newclass:limits = _swig_property(_libdrqueue.job_limits_get, _libdrqueue.job_limits_set)
    __swig_setmethods__["envvars"] = _libdrqueue.job_envvars_set
    __swig_getmethods__["envvars"] = _libdrqueue.job_envvars_get
    if _newclass:envvars = _swig_property(_libdrqueue.job_envvars_get, _libdrqueue.job_envvars_set)
    __swig_getmethods__["blocked_host"] = _libdrqueue.job_blocked_host_get
    if _newclass:blocked_host = _swig_property(_libdrqueue.job_blocked_host_get)
    __swig_getmethods__["frame_info"] = _libdrqueue.job_frame_info_get
    if _newclass:frame_info = _swig_property(_libdrqueue.job_frame_info_get)
    def __init__(self, *args): 
        this = _libdrqueue.new_job(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_job
    __del__ = lambda self : None;
    def environment_variable_add(*args): return _libdrqueue.job_environment_variable_add(*args)
    def environment_variable_delete(*args): return _libdrqueue.job_environment_variable_delete(*args)
    def environment_variable_find(*args): return _libdrqueue.job_environment_variable_find(*args)
    def request_frame_list(*args): return _libdrqueue.job_request_frame_list(*args)
    def job_frame_index_to_number(*args): return _libdrqueue.job_job_frame_index_to_number(*args)
    def request_stop(*args): return _libdrqueue.job_request_stop(*args)
    def request_rerun(*args): return _libdrqueue.job_request_rerun(*args)
    def request_hard_stop(*args): return _libdrqueue.job_request_hard_stop(*args)
    def request_delete(*args): return _libdrqueue.job_request_delete(*args)
    def request_continue(*args): return _libdrqueue.job_request_continue(*args)
    def send_to_queue(*args): return _libdrqueue.job_send_to_queue(*args)
    def update(*args): return _libdrqueue.job_update(*args)
job_swigregister = _libdrqueue.job_swigregister
job_swigregister(job)

class job_blocked_host(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, job_blocked_host, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, job_blocked_host, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ptr"] = _libdrqueue.job_blocked_host_ptr_set
    __swig_getmethods__["ptr"] = _libdrqueue.job_blocked_host_ptr_get
    if _newclass:ptr = _swig_property(_libdrqueue.job_blocked_host_ptr_get, _libdrqueue.job_blocked_host_ptr_set)
    __swig_setmethods__["padding"] = _libdrqueue.job_blocked_host_padding_set
    __swig_getmethods__["padding"] = _libdrqueue.job_blocked_host_padding_get
    if _newclass:padding = _swig_property(_libdrqueue.job_blocked_host_padding_get, _libdrqueue.job_blocked_host_padding_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_job_blocked_host(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_job_blocked_host
    __del__ = lambda self : None;
job_blocked_host_swigregister = _libdrqueue.job_blocked_host_swigregister
job_blocked_host_swigregister(job_blocked_host)

class job_frame_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, job_frame_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, job_frame_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ptr"] = _libdrqueue.job_frame_info_ptr_set
    __swig_getmethods__["ptr"] = _libdrqueue.job_frame_info_ptr_get
    if _newclass:ptr = _swig_property(_libdrqueue.job_frame_info_ptr_get, _libdrqueue.job_frame_info_ptr_set)
    __swig_setmethods__["padding"] = _libdrqueue.job_frame_info_padding_set
    __swig_getmethods__["padding"] = _libdrqueue.job_frame_info_padding_get
    if _newclass:padding = _swig_property(_libdrqueue.job_frame_info_padding_get, _libdrqueue.job_frame_info_padding_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_job_frame_info(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_job_frame_info
    __del__ = lambda self : None;
job_frame_info_swigregister = _libdrqueue.job_frame_info_swigregister
job_frame_info_swigregister(job_frame_info)

class tpol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tpol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tpol, name)
    __repr__ = _swig_repr
    __swig_setmethods__["index"] = _libdrqueue.tpol_index_set
    __swig_getmethods__["index"] = _libdrqueue.tpol_index_get
    if _newclass:index = _swig_property(_libdrqueue.tpol_index_get, _libdrqueue.tpol_index_set)
    __swig_setmethods__["pri"] = _libdrqueue.tpol_pri_set
    __swig_getmethods__["pri"] = _libdrqueue.tpol_pri_get
    if _newclass:pri = _swig_property(_libdrqueue.tpol_pri_get, _libdrqueue.tpol_pri_set)
    __swig_setmethods__["submit_time"] = _libdrqueue.tpol_submit_time_set
    __swig_getmethods__["submit_time"] = _libdrqueue.tpol_submit_time_get
    if _newclass:submit_time = _swig_property(_libdrqueue.tpol_submit_time_get, _libdrqueue.tpol_submit_time_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_tpol(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_tpol
    __del__ = lambda self : None;
tpol_swigregister = _libdrqueue.tpol_swigregister
tpol_swigregister(tpol)

job_index_free = _libdrqueue.job_index_free
job_report = _libdrqueue.job_report
job_status_string = _libdrqueue.job_status_string
job_frame_status_string = _libdrqueue.job_frame_status_string
job_frame_index_to_number = _libdrqueue.job_frame_index_to_number
job_frame_number_to_index = _libdrqueue.job_frame_number_to_index
job_frame_number_correct = _libdrqueue.job_frame_number_correct
job_nframes = _libdrqueue.job_nframes
job_copy = _libdrqueue.job_copy
job_fix_received_invalid = _libdrqueue.job_fix_received_invalid
job_bswap_from_network = _libdrqueue.job_bswap_from_network
job_bswap_to_network = _libdrqueue.job_bswap_to_network
job_available = _libdrqueue.job_available
job_available_no_icomp = _libdrqueue.job_available_no_icomp
job_first_frame_available = _libdrqueue.job_first_frame_available
job_first_frame_available_no_icomp = _libdrqueue.job_first_frame_available_no_icomp
job_frame_waiting = _libdrqueue.job_frame_waiting
job_update_assigned = _libdrqueue.job_update_assigned
job_init_registered = _libdrqueue.job_init_registered
job_init = _libdrqueue.job_init
job_frame_info_init = _libdrqueue.job_frame_info_init
job_delete = _libdrqueue.job_delete
job_njobs_masterdb = _libdrqueue.job_njobs_masterdb
job_update_info = _libdrqueue.job_update_info
job_check_frame_status = _libdrqueue.job_check_frame_status
job_stop = _libdrqueue.job_stop
job_continue = _libdrqueue.job_continue
job_index_correct_master = _libdrqueue.job_index_correct_master
job_limits_init = _libdrqueue.job_limits_init
job_limits_passed = _libdrqueue.job_limits_passed
job_limits_bswap_from_network = _libdrqueue.job_limits_bswap_from_network
job_limits_bswap_to_network = _libdrqueue.job_limits_bswap_to_network
job_environment_set = _libdrqueue.job_environment_set
job_logs_remove = _libdrqueue.job_logs_remove
get_frame_shared_memory = _libdrqueue.get_frame_shared_memory
attach_frame_shared_memory = _libdrqueue.attach_frame_shared_memory
detach_frame_shared_memory = _libdrqueue.detach_frame_shared_memory
get_blocked_host_shared_memory = _libdrqueue.get_blocked_host_shared_memory
attach_blocked_host_shared_memory = _libdrqueue.attach_blocked_host_shared_memory
detach_blocked_host_shared_memory = _libdrqueue.detach_blocked_host_shared_memory
priority_job_compare = _libdrqueue.priority_job_compare
job_koj_string = _libdrqueue.job_koj_string
job_block_host_add_by_name = _libdrqueue.job_block_host_add_by_name
job_block_host_remove_by_name = _libdrqueue.job_block_host_remove_by_name
job_block_host_exists_by_name = _libdrqueue.job_block_host_exists_by_name
class envvar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, envvar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, envvar, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _libdrqueue.envvar_name_set
    __swig_getmethods__["name"] = _libdrqueue.envvar_name_get
    if _newclass:name = _swig_property(_libdrqueue.envvar_name_get, _libdrqueue.envvar_name_set)
    __swig_setmethods__["value"] = _libdrqueue.envvar_value_set
    __swig_getmethods__["value"] = _libdrqueue.envvar_value_get
    if _newclass:value = _swig_property(_libdrqueue.envvar_value_get, _libdrqueue.envvar_value_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_envvar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_envvar
    __del__ = lambda self : None;
envvar_swigregister = _libdrqueue.envvar_swigregister
envvar_swigregister(envvar)

class envvars(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, envvars, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, envvars, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nvariables"] = _libdrqueue.envvars_nvariables_set
    __swig_getmethods__["nvariables"] = _libdrqueue.envvars_nvariables_get
    if _newclass:nvariables = _swig_property(_libdrqueue.envvars_nvariables_get, _libdrqueue.envvars_nvariables_set)
    __swig_setmethods__["evshmid"] = _libdrqueue.envvars_evshmid_set
    __swig_getmethods__["evshmid"] = _libdrqueue.envvars_evshmid_get
    if _newclass:evshmid = _swig_property(_libdrqueue.envvars_evshmid_get, _libdrqueue.envvars_evshmid_set)
    __swig_setmethods__["evsemid"] = _libdrqueue.envvars_evsemid_set
    __swig_getmethods__["evsemid"] = _libdrqueue.envvars_evsemid_get
    if _newclass:evsemid = _swig_property(_libdrqueue.envvars_evsemid_get, _libdrqueue.envvars_evsemid_set)
    __swig_getmethods__["variables"] = _libdrqueue.envvars_variables_get
    if _newclass:variables = _swig_property(_libdrqueue.envvars_variables_get)
    def __init__(self, *args): 
        this = _libdrqueue.new_envvars(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_envvars
    __del__ = lambda self : None;
envvars_swigregister = _libdrqueue.envvars_swigregister
envvars_swigregister(envvars)

class envvars_variables(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, envvars_variables, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, envvars_variables, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ptr"] = _libdrqueue.envvars_variables_ptr_set
    __swig_getmethods__["ptr"] = _libdrqueue.envvars_variables_ptr_get
    if _newclass:ptr = _swig_property(_libdrqueue.envvars_variables_ptr_get, _libdrqueue.envvars_variables_ptr_set)
    __swig_setmethods__["padding"] = _libdrqueue.envvars_variables_padding_set
    __swig_getmethods__["padding"] = _libdrqueue.envvars_variables_padding_get
    if _newclass:padding = _swig_property(_libdrqueue.envvars_variables_padding_get, _libdrqueue.envvars_variables_padding_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_envvars_variables(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_envvars_variables
    __del__ = lambda self : None;
envvars_variables_swigregister = _libdrqueue.envvars_variables_swigregister
envvars_variables_swigregister(envvars_variables)

envvars_init = _libdrqueue.envvars_init
envvars_empty = _libdrqueue.envvars_empty
envvars_free = _libdrqueue.envvars_free
envvars_variable_add = _libdrqueue.envvars_variable_add
envvars_variable_delete = _libdrqueue.envvars_variable_delete
envvars_attach = _libdrqueue.envvars_attach
envvars_detach = _libdrqueue.envvars_detach
envvars_variable_find = _libdrqueue.envvars_variable_find
envvars_get_shared_memory = _libdrqueue.envvars_get_shared_memory
envvars_dump_info = _libdrqueue.envvars_dump_info
REVISION = _libdrqueue.REVISION
VERSION_MAJOR = _libdrqueue.VERSION_MAJOR
VERSION_MINOR = _libdrqueue.VERSION_MINOR
VERSION_PATCH = _libdrqueue.VERSION_PATCH
VERSION_POST = _libdrqueue.VERSION_POST
VERSION_PRE = _libdrqueue.VERSION_PRE
common_environment_check = _libdrqueue.common_environment_check
show_version = _libdrqueue.show_version
rmdir_check_str = _libdrqueue.rmdir_check_str
remove_dir = _libdrqueue.remove_dir
time_str = _libdrqueue.time_str
set_default_env = _libdrqueue.set_default_env
common_date_check = _libdrqueue.common_date_check
mn_job_finished = _libdrqueue.mn_job_finished
get_version_prepost = _libdrqueue.get_version_prepost
get_revision_string = _libdrqueue.get_revision_string
get_version_complete = _libdrqueue.get_version_complete
class pool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pool, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _libdrqueue.pool_name_set
    __swig_getmethods__["name"] = _libdrqueue.pool_name_get
    if _newclass:name = _swig_property(_libdrqueue.pool_name_get, _libdrqueue.pool_name_set)
    def __init__(self, *args): 
        this = _libdrqueue.new_pool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libdrqueue.delete_pool
    __del__ = lambda self : None;
pool_swigregister = _libdrqueue.pool_swigregister
pool_swigregister(pool)

computer_pool_get_shared_memory = _libdrqueue.computer_pool_get_shared_memory
computer_pool_attach_shared_memory = _libdrqueue.computer_pool_attach_shared_memory
computer_pool_detach_shared_memory = _libdrqueue.computer_pool_detach_shared_memory
computer_pool_init = _libdrqueue.computer_pool_init
computer_pool_add = _libdrqueue.computer_pool_add
computer_pool_remove = _libdrqueue.computer_pool_remove
computer_pool_list = _libdrqueue.computer_pool_list
computer_pool_exists = _libdrqueue.computer_pool_exists
computer_pool_free = _libdrqueue.computer_pool_free
computer_pool_set_from_environment = _libdrqueue.computer_pool_set_from_environment
computer_pool_copy = _libdrqueue.computer_pool_copy
computer_pool_lock_check = _libdrqueue.computer_pool_lock_check
computer_pool_lock = _libdrqueue.computer_pool_lock
computer_pool_release = _libdrqueue.computer_pool_release


